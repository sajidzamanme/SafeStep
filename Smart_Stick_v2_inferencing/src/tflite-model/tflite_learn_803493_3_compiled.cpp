/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 17.10.2025 17:32:07

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70416;
#else
constexpr int kTensorArenaSize = 69392;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 25568, -31185, -34062, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00014260088209994137, 0.00013274665980134159, 0.00012324145063757896, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 97,37,114,-44,-66,41,2,9,-21,54,9,-20,-19,-75,103,14,-25,80,99,127,-24,1,50,-68,-105,101,-49,17,73,22,3,8, 
  /* [1][0][][] */ 18,-20,-53,30,2,103,-9,-1,118,-26,-3,-50,-46,105,23,-34,90,-28,4,-127,-90,31,108,74,27,31,7,-3,-96,-52,12,-9, 
  /* [2][0][][] */ -57,87,-69,67,88,-66,-36,118,96,40,127,12,-87,-73,50,118,-71,-79,15,-118,81,105,-59,-88,64,-50,-12,-102,-15,-102,70,-11, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0039740391075611115, 0.0036994190886616707, 0.0034345253370702267, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -408, 309, -657, 601, 758, 241, -588, 836, 1030, -1201, 705, -1579, -1198, 987, -103, 181, 732, -1421, -669, -215, -1094, 826, 777, 774, 501, 358, -1363, -1133, 2280, -918, 98, -1339, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.9443464629584923e-05, 4.5556935219792649e-05, 5.019952732254751e-05, 5.1978055125800893e-05, 4.236945096636191e-05, 4.5099048293195665e-05, 4.0808528865454718e-05, 4.546895797830075e-05, 4.7549390728818253e-05, 4.5191154640633613e-05, 4.7185876610456035e-05, 4.1980252717621624e-05, 4.1364128264831379e-05, 4.5223176130093634e-05, 4.6037421270739287e-05, 4.0282571717398241e-05, 4.3827378249261528e-05, 4.4389427785063162e-05, 4.4926378905074671e-05, 5.1214599807281047e-05, 3.9044258301146328e-05, 3.9021921111270785e-05, 5.264269930194132e-05, 4.4220494601177052e-05, 4.0476941649103537e-05, 4.1846418753266335e-05, 4.6905173803679645e-05, 4.4792341213906184e-05, 5.084033909952268e-05, 5.1821789384121075e-05, 4.7617650125175714e-05, 4.2641808249754831e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -31,-49,111,-6,90,-25,-49,-113,61,-110,-103,-2,60,45,-45,44,-72,-56,-63,-29,-84,-111,14,107,-123,13,79,-63,111,-7,-1,-93,79,-74,-98,64,-124,-80,-106,24,68,-93,-107,114,45,-127,106,-27, 
  /* [1][0][][] */ -80,46,-85,9,-34,90,-20,20,87,-89,-127,74,21,-71,40,77,81,-51,8,116,-43,10,3,21,19,25,-22,104,-23,19,43,-75,68,95,2,40,49,58,-18,-73,-53,9,-38,-124,-26,40,-14,-39, 
  /* [2][0][][] */ 69,19,-60,64,-30,-55,121,64,-81,59,-39,127,60,35,55,-98,-59,-29,16,34,-91,-24,79,24,-19,51,74,-6,-69,53,105,63,-66,-30,-85,-98,-81,73,77,-26,-102,-73,1,-13,-80,85,-22,-74, 
  /* [3][0][][] */ 53,10,34,-7,-40,52,-127,43,49,26,53,12,86,47,70,19,89,84,-40,19,106,-56,-44,-93,-44,-69,-56,100,51,-68,31,21,-30,-11,-7,-2,-61,-18,37,51,-13,-61,-73,-3,70,32,-31,-55, 
  /* [4][0][][] */ 14,118,-15,67,-10,-1,-26,33,77,97,-45,7,24,-84,11,-39,-37,1,-74,30,120,-66,60,23,-71,20,80,-36,-77,54,-111,-48,86,127,29,-77,-35,7,-102,52,-41,-45,-73,-123,47,114,51,70, 
  /* [5][0][][] */ 83,-99,69,78,43,-124,-16,48,75,-102,-10,-51,30,45,20,15,57,56,-65,95,36,36,19,-48,-127,-51,-50,-76,57,-3,-19,-82,-29,10,-81,0,-100,-41,42,25,-110,-42,41,76,-29,25,10,-47, 
  /* [6][0][][] */ 41,-52,106,69,-90,-19,36,59,39,-87,-2,-66,77,101,107,-73,35,7,-8,96,-83,-126,100,107,-47,-88,-16,-65,-35,-119,49,-85,-92,-127,-52,-112,-15,32,-108,81,86,50,18,-23,-119,108,-39,-52, 
  /* [7][0][][] */ 76,79,-36,-23,-49,122,-72,16,120,16,-122,-28,50,-127,60,86,44,17,-10,116,63,48,-22,75,-113,109,52,69,-101,111,-65,38,40,38,71,106,-80,86,0,-22,91,-55,78,25,59,12,105,-85, 
  /* [8][0][][] */ 13,43,-25,-60,71,41,-116,0,16,48,46,95,22,-86,-57,-42,-43,100,-44,30,47,-5,83,86,-105,103,49,85,-37,30,-127,120,98,-6,49,11,117,11,-6,77,79,105,-83,-101,9,-9,-12,108, 
  /* [9][0][][] */ -10,-11,79,18,48,-104,-14,-127,15,19,-30,33,-49,-70,-112,-26,-12,-24,-112,-77,-17,73,-117,-99,101,-30,-23,4,-29,-78,-62,64,29,-21,9,-31,-88,1,-53,-60,28,-86,27,-100,52,-4,-107,29, 
  /* [10][0][][] */ -82,87,72,-45,-2,108,40,38,47,37,-20,-99,84,24,-13,29,-42,72,-98,-42,-3,39,30,-65,-19,59,-88,-82,-84,82,-127,-67,89,100,111,77,-24,14,-26,32,-28,111,-97,-74,-72,-41,5,-40, 
  /* [11][0][][] */ 91,-9,-40,75,84,23,94,2,81,62,-105,90,-36,-51,7,-83,-83,-127,36,14,0,45,-6,-125,-123,-118,-37,40,47,-28,54,-49,-114,-100,22,18,-88,52,-53,-84,-53,72,-97,-24,-69,-84,-110,-114, 
  /* [12][0][][] */ 2,46,-74,-17,61,-13,-6,13,-94,36,-42,0,-67,42,29,-98,-117,-47,-65,-96,1,-29,-8,77,-87,-63,80,-121,66,-7,-9,91,-107,-92,-66,-2,-23,-93,-38,23,87,18,-127,-62,-43,-101,-59,92, 
  /* [13][0][][] */ 109,-63,109,98,105,85,66,62,43,-78,30,-9,106,56,48,-59,-88,-46,-48,27,83,-42,127,-60,-59,49,-17,30,-54,-99,59,57,33,111,-43,12,-58,-27,29,84,-59,88,-32,27,-27,34,-25,-24, 
  /* [14][0][][] */ -48,-117,79,58,66,-49,-47,-102,-101,-32,53,76,-33,-110,-102,-104,-44,-50,-4,26,-37,16,-9,28,-109,-66,-61,31,-103,-127,-109,41,80,-22,-49,-15,88,91,21,-99,-8,-102,24,64,54,-108,29,-86, 
  /* [15][0][][] */ -16,-11,-57,90,93,-65,4,-82,76,-1,-108,-10,70,-47,-67,-88,71,-4,-123,40,51,40,42,109,62,83,59,105,-11,77,21,-127,24,8,-47,16,-68,122,107,-83,20,118,-64,-62,31,-68,-24,-66, 
  /* [16][0][][] */ -50,-10,114,-44,61,86,-15,40,23,61,-77,85,15,-39,-65,-72,120,91,85,56,127,54,-13,37,-29,63,-84,72,-65,-5,31,38,-106,90,28,32,-13,47,-37,-40,19,-27,85,103,70,104,71,-12, 
  /* [17][0][][] */ 23,-114,4,53,-66,-70,-23,-113,75,-107,62,31,67,101,-117,70,4,33,78,86,-111,-16,-8,-6,8,42,-69,-1,73,-53,21,44,-51,-46,36,13,-68,89,-101,-39,-59,-62,-34,-22,-15,-14,127,-120, 
  /* [18][0][][] */ -90,80,94,-66,-21,-95,-62,0,-2,60,-127,-53,-58,18,49,-48,17,-34,37,-26,84,-39,-14,-70,59,-97,-23,92,4,29,-14,20,36,-43,-96,-95,-32,26,-25,49,-40,-13,-62,-39,-119,32,26,-12, 
  /* [19][0][][] */ 60,19,75,27,44,-70,127,70,73,-51,51,43,-68,76,-47,43,83,-84,107,42,-23,64,-15,28,76,-67,27,-60,-57,-94,-1,43,58,-66,34,2,6,-37,-46,-63,49,-91,-57,47,-66,20,59,-76, 
  /* [20][0][][] */ 7,84,52,82,-101,116,-11,52,46,0,-110,-9,-27,61,48,-55,-74,-39,-86,-41,8,-20,-102,-63,74,-52,-83,37,1,31,-42,96,120,32,11,93,23,3,-31,-92,-89,-49,-107,-127,-40,-80,-46,105, 
  /* [21][0][][] */ 87,89,79,-95,116,-69,17,30,5,-58,-79,50,18,-12,-40,-81,-101,-25,33,-4,127,-37,80,-96,31,-70,-27,93,29,13,-60,-8,21,39,-90,-107,127,103,-120,-23,-8,19,30,-25,-89,-77,-79,106, 
  /* [22][0][][] */ 41,-37,-42,-63,88,-45,43,57,-79,83,-44,-63,107,-127,-86,-63,45,84,-73,-36,84,-49,41,19,68,12,-114,93,-25,-62,-87,-65,52,64,17,13,16,0,-35,-71,6,4,14,83,57,-76,65,-7, 
  /* [23][0][][] */ 70,-90,20,55,106,-127,37,-90,33,-60,99,84,40,-94,-5,-59,96,-19,-83,84,98,-88,116,-20,-17,-9,55,32,89,24,56,-17,-36,56,1,15,100,-5,-91,30,-94,12,23,-83,-52,-75,81,29, 
  /* [24][0][][] */ -78,-44,-102,-64,-73,-111,-124,-85,60,124,68,59,127,9,-36,-110,-75,51,20,-47,112,-84,-54,-65,32,-14,65,73,124,53,-49,-48,5,25,44,21,-46,-93,58,-5,-98,-91,105,-18,29,-38,34,77, 
  /* [25][0][][] */ -63,-72,-60,-14,99,-83,-61,50,31,-99,-14,48,88,34,-127,-31,-57,78,54,-117,74,69,7,-46,32,-50,-117,41,100,-104,57,127,82,-99,30,56,103,-53,-17,3,-74,101,-84,25,101,38,44,30, 
  /* [26][0][][] */ 22,-110,-42,-32,-107,-22,-26,-32,-106,-127,73,53,-89,-38,1,-31,74,3,-86,-74,-11,47,65,2,27,35,3,19,-9,-4,-91,-24,-46,-74,-99,-106,-77,52,-68,74,-103,67,27,11,-83,40,-49,69, 
  /* [27][0][][] */ 33,-10,-69,-110,-127,-80,-34,-34,31,70,38,-90,-37,80,56,-36,48,-16,52,-91,-104,-7,-30,-24,-106,37,-115,-23,49,7,0,-23,39,42,-97,-92,-97,-61,-120,71,-91,-3,16,19,71,5,54,75, 
  /* [28][0][][] */ 101,43,109,78,-55,-3,-35,-19,12,-46,83,87,-29,-36,51,126,113,118,-13,108,13,64,-51,-21,-48,109,-29,-12,-25,-15,38,21,-38,50,107,102,55,-43,11,51,127,72,-27,77,-48,36,55,78, 
  /* [29][0][][] */ 34,29,21,-60,-85,3,-51,-10,80,-32,-36,-81,74,-36,-45,-43,-99,65,54,-64,-80,-10,60,17,-39,-5,-22,-41,-81,-9,127,-21,23,-14,-36,-27,-27,87,-24,59,74,68,-48,106,-2,63,-34,-24, 
  /* [30][0][][] */ -9,-53,-59,26,-83,26,-71,-8,99,-16,-1,-53,-108,-8,57,15,-8,-8,60,-100,25,-80,-110,10,-127,-8,-51,101,-16,-87,-106,12,-70,-54,-97,-41,14,-30,-12,14,81,-66,-41,79,93,-44,88,51, 
  /* [31][0][][] */ 72,-106,16,77,27,42,-10,-115,-45,-39,-97,-93,74,-91,-62,89,-77,-105,17,27,40,14,-51,87,29,-127,19,18,-90,-87,81,83,-2,-1,-107,-27,73,-49,-83,-124,37,-86,-47,10,-16,-71,-53,4, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022447118535637856, 0.0025926271919161081, 0.0028568352572619915, 0.0029580504633486271, 0.0024112286046147346, 0.0025665690191090107, 0.0023223971948027611, 0.0025876204017549753, 0.0027060168795287609, 0.0025718107353895903, 0.0026853294111788273, 0.002389079425483942, 0.0023540160618722439, 0.0025736331008374691, 0.0026199712883681059, 0.0022924651857465506, 0.0024941987358033657, 0.0025261847767978907, 0.0025567424017935991, 0.0029146026354283094, 0.0022219931706786156, 0.0022207221481949091, 0.0029958751983940601, 0.0025165707338601351, 0.0023035267367959023, 0.0023814630694687366, 0.0026693549007177353, 0.0025491144042462111, 0.0028933035209774971, 0.0029491574969142675, 0.0027099016588181257, 0.0024267283733934164, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { -538, 2233, 3017, 5289, 13313, -1139, -1404, 39173, 1462, 12843, 1293, -2210, 8724, -4217, 6126, -2835, 98, -2202, 936, 3069, 4955, 3898, 8192, 977, -4062, -1902, 432, 3041, 2985, 5956, -1019, 4739, 5260, 7469, 6079, 1950, 15289, 2333, 917, -1493, 1073, 19875, -894, 3154, 13850, -244, 2483, 9835, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00020734252757392824, 0.00015508053184021264, 0.00011073800851590931, 0.00010062062210636213, 7.0395806687884033e-05, 9.441535803489387e-05, 0.00021232916333246976, 2.4015922463149764e-05, 0.00020097024389542639, 6.1834354710299522e-05, 0.00011087151506217197, 0.0001962383248610422, 7.6813892519567162e-05, 0.00012247213453520089, 0.00010788397776195779, 9.2901362222619355e-05, 0.00012104430788895115, 4.4723317841999233e-05, 0.00018003964214585721, 0.00018015752721112221, 0.00013959028001409024, 0.0001090369260055013, 8.169000648194924e-05, 0.00016849023813847452, 0.00012523644545581192, 0.00020034538465552032, 0.00012816273374482989, 0.00018280551012139767, 8.2444516010582447e-05, 0.00010454378934809938, 0.00010299224959453568, 0.00012153256830060855, 0.0001377281587338075, 0.00010637342347763479, 7.8049946750979871e-05, 0.00012419302947819233, 6.0593971284106374e-05, 0.00010380711319157854, 0.00010064331581816077, 0.00014657276915386319, 0.00019187445286661386, 4.9512738769408315e-05, 0.00018161519255954772, 8.1371712440159172e-05, 6.1186874518170953e-05, 0.00012115659774281085, 0.00011365243699401617, 8.4019135101698339e-05, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 37,-34,-54,11,-127,25,-67,4, 
  /* [1][0][][] */ -127,51,119,9,-97,-10,-1,-26, 
  /* [2][0][][] */ 14,69,-21,22,-47,-127,-21,95, 
  /* [3][0][][] */ -88,22,-24,127,-5,-55,-67,-56, 
  /* [4][0][][] */ 18,-17,29,-103,-10,17,-127,25, 
  /* [5][0][][] */ 54,127,-49,-39,-26,-6,29,-117, 
  /* [6][0][][] */ 44,-40,44,107,-37,-127,-12,-92, 
  /* [7][0][][] */ 53,118,-55,-70,-70,-17,11,-127, 
  /* [8][0][][] */ -4,-23,47,-6,14,9,-48,-127, 
  /* [9][0][][] */ -87,7,-103,20,-127,-73,-96,-33, 
  /* [10][0][][] */ 102,1,107,-37,-127,10,92,119, 
  /* [11][0][][] */ 127,-27,-72,3,47,1,-65,-4, 
  /* [12][0][][] */ -22,-94,127,18,30,19,-77,71, 
  /* [13][0][][] */ 34,-69,90,-15,5,-97,63,-127, 
  /* [14][0][][] */ -96,21,127,-7,-39,-59,49,-54, 
  /* [15][0][][] */ 38,127,-61,-56,-73,-16,42,-91, 
  /* [16][0][][] */ 29,96,-38,54,1,-32,-11,127, 
  /* [17][0][][] */ 39,68,-3,74,-48,86,-127,40, 
  /* [18][0][][] */ 76,-42,127,-47,68,-102,25,-43, 
  /* [19][0][][] */ 4,1,17,127,40,-37,-32,-88, 
  /* [20][0][][] */ 8,18,-16,34,-5,54,-127,17, 
  /* [21][0][][] */ 11,-15,45,17,18,127,61,-66, 
  /* [22][0][][] */ 75,-127,1,70,-70,76,15,33, 
  /* [23][0][][] */ -47,-100,-16,-124,3,-75,-16,-127, 
  /* [24][0][][] */ 14,27,-23,-58,-35,-127,-47,44, 
  /* [25][0][][] */ 60,83,127,22,9,19,-59,4, 
  /* [26][0][][] */ -96,28,127,-56,-93,-5,87,-15, 
  /* [27][0][][] */ -63,39,-24,-95,27,127,-20,85, 
  /* [28][0][][] */ 21,-127,79,57,44,10,-30,125, 
  /* [29][0][][] */ -127,70,76,-33,-116,12,98,-54, 
  /* [30][0][][] */ 101,-113,23,82,-127,-4,54,-110, 
  /* [31][0][][] */ 66,75,56,-42,-120,-15,5,127, 
  /* [32][0][][] */ -47,1,85,-40,44,2,-127,-105, 
  /* [33][0][][] */ 47,52,102,-127,32,48,-45,77, 
  /* [34][0][][] */ -17,-103,96,-35,43,127,58,-82, 
  /* [35][0][][] */ 35,21,88,2,19,127,15,-43, 
  /* [36][0][][] */ -8,35,-15,42,64,-127,1,36, 
  /* [37][0][][] */ 19,-15,63,18,-113,127,-22,-29, 
  /* [38][0][][] */ -127,-10,-114,-36,70,-26,-112,-48, 
  /* [39][0][][] */ 21,-3,30,-98,-23,38,-127,23, 
  /* [40][0][][] */ 87,-20,-73,-127,72,65,67,-25, 
  /* [41][0][][] */ 14,-13,2,127,-88,19,-92,-61, 
  /* [42][0][][] */ -86,16,71,127,-60,-71,-58,10, 
  /* [43][0][][] */ 87,-123,112,50,-127,30,112,70, 
  /* [44][0][][] */ 8,-33,45,-64,-17,127,41,27, 
  /* [45][0][][] */ -35,29,-45,6,79,-58,-127,-35, 
  /* [46][0][][] */ -94,-100,-6,-19,25,127,-41,-107, 
  /* [47][0][][] */ -107,-91,-31,36,29,127,-41,-45, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0032976875081658363, 0.0024664844386279583, 0.0017612370429560542, 0.0016003246419131756, 0.0011196129489690065, 0.0015016328543424606, 0.0033769975416362286, 0.00038196219247765839, 0.0031963393557816744, 0.00098344695288687944, 0.0017633604584261775, 0.0031210803426802158, 0.0012216896284371614, 0.0019478630274534225, 0.0017158450791612267, 0.0014775533927604556, 0.0019251540070399642, 0.00071130378637462854, 0.0028634476475417614, 0.002865322632715106, 0.0022201191168278456, 0.0017341821221634746, 0.0012992419069632888, 0.0026797596365213394, 0.0019918279722332954, 0.0031864012125879526, 0.0020383694209158421, 0.0029074375052005053, 0.0013112421147525311, 0.0016627208096906543, 0.0016380443703383207, 0.0019329196074977517, 0.0021905030589550734, 0.0016918203327804804, 0.0012413484510034323, 0.0019752329681068659, 0.00096371921245008707, 0.0016510044224560261, 0.0016006856458261609, 0.0023311723489314318, 0.0030516749247908592, 0.00078747730003669858, 0.0028885060455650091, 0.0012941795866936445, 0.00097314902814105153, 0.0019269399344921112, 0.0018075896659865975, 0.0013362857280299067, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -4646, 272, -17620, 13558, 10616, -3559, 10433, 1824, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 7.8923490946181118e-05, 0.00011660838936222717, 4.7973746404750273e-05, 7.160910899983719e-05, 9.7897231171373278e-05, 7.2211165388580412e-05, 0.00010189491149503738, 0.00010588317672954872, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 23,30,31,25,-3,-42,52,52,-8,24,-10,-10,44,-40,58,-28,-66,-26,-127,-13,46,-32,31,54,6,-18,49,1,-9,-53,12,38,-46,50,53,10,61,84,-52,-47,-2,27,-97,-50,30,17,-16,-52, 
  /* [1][0][][] */ -18,-32,3,77,-18,7,-8,-13,20,16,-11,-45,1,-8,6,6,49,18,51,-34,8,27,18,-45,-1,-6,-26,-36,-31,7,-19,-3,-26,-24,-102,66,12,13,-127,-25,29,-17,61,22,104,-15,-45,37, 
  /* [2][0][][] */ -12,-1,38,-25,-20,-8,-6,115,-36,84,-47,-8,127,-12,38,-6,-44,-72,-1,41,-12,-23,21,-6,3,64,4,37,16,7,74,26,-61,-21,23,66,1,61,55,-121,55,27,-45,-23,21,36,-12,-15, 
  /* [3][0][][] */ 29,4,-127,-30,23,-18,39,-21,-15,-14,2,21,-53,-43,35,15,19,52,-3,38,-45,21,-66,-5,-27,-72,37,-3,-59,-49,-63,11,78,47,-31,9,-59,-7,26,-7,20,-64,-13,14,54,-36,34,-17, 
  /* [4][0][][] */ 12,56,-13,-14,29,-14,-85,-115,-31,28,-13,87,-2,-24,-4,50,42,59,-90,3,34,12,-37,0,48,-18,12,-1,-18,10,-11,-42,28,-20,-127,23,-25,3,37,49,-42,-33,84,39,10,-42,20,18, 
  /* [5][0][][] */ -56,-30,105,11,64,20,63,-19,-127,-8,-106,-23,-71,-88,61,64,-22,23,25,-1,33,17,35,3,-33,0,-7,-4,-48,-7,-10,-22,-38,29,54,34,-7,72,-10,-6,53,-32,-62,49,-22,10,39,24, 
  /* [6][0][][] */ 85,73,-30,25,34,-19,-118,-63,11,9,9,71,-33,-23,-10,37,-31,31,10,5,126,-17,58,127,18,-52,12,-36,-46,-16,-39,-65,55,-24,30,-22,-14,30,-54,44,-54,-54,-56,-35,-14,-43,39,-7, 
  /* [7][0][][] */ 7,43,35,-79,45,-54,-27,-18,0,3,27,27,-28,-3,35,-14,-26,26,-16,41,-42,-4,-1,49,5,-36,8,44,-5,33,-33,-1,46,-4,-30,-31,-51,11,127,-6,4,-19,-23,-20,33,-5,63,9, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0043779988773167133, 0.0064684338867664337, 0.0026611723005771637, 0.0039722598157823086, 0.0054304995574057102, 0.0040056565776467323, 0.0056522563099861145, 0.0058734910562634468, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { -3594, -3996, 762, -1732, -1288, 1299, 4416, 17151, -16680, 19645, 14193, -9298, 12266, -4098, 11650, -1837, -410, 1371, 3137, -2879, -7817, -4283, -19658, 3625, 14620, 1213, -2321, 4460, 11683, 9309, 11521, -4714, -10251, 246, -3531, -8650, 4107, 15927, -7539, 17670, 1028, -1252, -9873, -3548, -11305, 18811, -855, 11673, };
const TfArray<48, float> quant10_scale = { 48, { 7.1105430833995342e-05, 0.00020637320994865149, 0.00012298632645979524, 0.00017012034368235618, 6.76189229125157e-05, 0.0001615309010958299, 0.00013197622320149094, 0.00029505282873287797, 8.7719665316399187e-05, 5.9637321101035923e-05, 9.0069668658543378e-05, 8.7798049207776785e-05, 7.5571842899080366e-05, 0.00011213766265427694, 0.00011810747673735023, 9.2687216238118708e-05, 0.00026411900762468576, 0.00016046420205384493, 6.4757819927763194e-05, 0.00017086193838622421, 0.00011326526146149263, 6.2664032157044858e-05, 6.8200424720998853e-05, 0.00017655706324148923, 7.0301510277204216e-05, 0.00012325508578214794, 4.9316528020426631e-05, 8.4874103777110577e-05, 8.2871883932966739e-05, 9.3870825367048383e-05, 0.00011589747009566054, 0.00010625171125866473, 0.00015029814676381648, 0.00017965395818464458, 0.00027927276096306741, 8.6838677816558629e-05, 8.5111911175772548e-05, 7.7874639828223735e-05, 0.0001902929216157645, 8.5719460912514478e-05, 0.00012372784840408713, 0.00015159414033405483, 8.3938030002173036e-05, 0.00013095780741423368, 0.00012402837455738336, 4.9619782657828182e-05, 6.1967912188265473e-05, 8.5351108282338828e-05, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 59,78,65,49,1,-66,49,31,-38,-10,-34,41,42,34,-10,18,54,-61,103,82,87,0,-4,-5,-50,-48,86,7,-12,-46,14,53,40,-93,33,24,-11,12,0,-127,-8,-78,-32,-20,3,-110,112,-127, 127,1,84,-75,78,51,48,-38,-79,-76,16,127,12,-41,-127,39,-7,95,63,58,15,85,61,20,110,-48,13,-127,-127,-47,-127,127,21,-87,-89,127,40,-90,-73,-101,8,127,-70,22,-53,-75,119,-6, 39,4,18,-65,0,-63,48,23,-36,11,-15,67,30,27,27,4,-48,0,63,37,-3,-43,-54,-20,-57,-78,-24,-27,-54,-102,-16,4,40,-62,39,49,-49,-75,9,-63,9,-34,92,-21,-1,-127,13,-56, 
  /* [0][1][][] */ 97,0,35,83,58,79,-3,-127,118,-127,-91,-95,7,70,-57,127,-127,86,81,38,25,77,49,-56,-18,127,75,35,51,-5,-97,23,76,71,-74,48,-49,11,7,-73,-6,-66,49,-83,44,-10,87,-41, 21,127,-127,84,127,49,-127,15,127,-44,2,119,-127,127,-19,4,45,-127,-127,-18,127,16,127,-127,-83,74,-56,20,-19,-16,31,-37,127,-19,103,-80,112,-93,127,102,127,52,-94,3,114,26,-127,-40, 48,13,3,-127,75,33,13,-77,123,-30,-127,1,12,19,-73,100,79,-13,17,95,59,-127,41,91,-68,98,-76,-5,20,-5,-63,28,-9,58,127,60,-43,-19,-43,-6,-13,-41,127,127,127,-26,84,-37, 
  /* [0][2][][] */ 20,48,46,74,-21,-15,41,28,26,-12,15,-11,57,-49,46,-62,-5,14,69,-61,119,-1,-21,-74,-127,-54,127,115,16,-69,-34,75,26,18,11,18,-72,11,12,-13,-18,-55,47,-22,3,-22,26,-64, 35,0,19,12,-34,-127,7,-68,8,-36,25,-9,1,-63,-12,42,18,-62,6,90,71,62,34,10,5,-55,-50,74,-99,-30,-59,19,4,127,-64,11,-127,-127,32,-9,-96,86,-6,15,-26,-82,75,-20, -9,-1,28,-65,-8,-16,42,41,10,10,28,24,44,-77,50,-26,1,-36,42,-127,40,-71,-76,47,-99,-78,-124,50,-23,-127,4,21,21,-43,-13,37,-113,-90,-14,-7,-11,-5,7,11,-4,0,-48,-58, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0053818984888494015, 0.015620180405676365, 0.0093087106943130493, 0.012876236811280251, 0.0051180082373321056, 0.012226111255586147, 0.0099891470745205879, 0.022332251071929932, 0.0066394130699336529, 0.0045138886198401451, 0.0068172821775078773, 0.0066453460603952408, 0.0057199564762413502, 0.0084875868633389473, 0.0089394357055425644, 0.0070154019631445408, 0.01999090239405632, 0.012145373970270157, 0.0049014538526535034, 0.012932367622852325, 0.0085729332640767097, 0.0047429772093892097, 0.0051620211452245712, 0.013363425619900227, 0.0053210505284368992, 0.0093290535733103752, 0.0037327182944864035, 0.0064240354113280773, 0.0062724892050027847, 0.0071049882099032402, 0.0087721627205610275, 0.0080420849844813347, 0.011375915259122849, 0.013597826473414898, 0.021137874573469162, 0.0065727317705750465, 0.0064420346170663834, 0.0058942530304193497, 0.014403079636394978, 0.0064880196005105972, 0.0093648359179496765, 0.011474007740616798, 0.0063531850464642048, 0.0099120642989873886, 0.009387582540512085, 0.0037556714378297329, 0.0046902885660529137, 0.0064601395279169083, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { -2094, -3549, 6109, -1450, -3734, 4896, 4354, 34864, 2080, 5478, 7975, 3545, 1996, 26063, 7237, -2654, 25512, 3916, 1549, -5592, 618, -321, 2999, 23888, 2758, 7635, 3816, -519, 15127, 14, 2053, -1660, -2341, -4795, -7351, 2327, 3637, 2327, 2865, 4429, 3914, 769, 6630, 2629, 15921, 5117, -2936, 2003, };
const TfArray<48, float> quant12_scale = { 48, { 0.00014378818741533905, 0.00014228244253899902, 0.00011249105591559783, 8.7198655819520354e-05, 0.00012797150702681392, 6.8458517489489168e-05, 0.00012993623386137187, 3.5029519494855776e-05, 0.00010137087519979104, 0.00010794638365041465, 0.00010190786269959062, 9.5538613095413893e-05, 0.000174043292645365, 3.6198238376528025e-05, 0.00010331686644349247, 0.00016089135897345841, 3.8566213333979249e-05, 7.7243515988811851e-05, 0.00016505456005688757, 0.00010939459752989933, 9.493371908320114e-05, 0.00020464870613068342, 0.00011935106158489361, 4.1538743971614167e-05, 8.6671527242287993e-05, 8.2602673501241952e-05, 0.00016839397721923888, 0.00014394494064617902, 4.1351875552209094e-05, 0.00022963386436458677, 0.00011803820234490559, 0.00020696151477750391, 0.00018485708278603852, 8.2880644185934216e-05, 6.7715431214310229e-05, 0.00018541306781116873, 0.00011402492964407429, 0.0001358862646156922, 0.00013448114623315632, 0.00011248742521274835, 0.00016371540550608188, 0.0001841061603045091, 9.7757707408163697e-05, 0.00016431891708634794, 5.5147949751699343e-05, 0.00013198509986978024, 8.5127649072092026e-05, 0.00011811688455054536, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -17,-54,-38,88,7,-66,-68,-127, 
  /* [1][0][][] */ 127,-17,31,-18,30,-78,5,35, 
  /* [2][0][][] */ -27,65,-5,-127,21,90,-80,69, 
  /* [3][0][][] */ -32,127,-61,-87,-109,-4,49,-102, 
  /* [4][0][][] */ 2,-85,-96,-47,25,-76,-71,-127, 
  /* [5][0][][] */ -60,-72,105,36,34,120,54,-127, 
  /* [6][0][][] */ -10,24,-60,44,15,11,-127,-44, 
  /* [7][0][][] */ 30,-28,11,26,-59,52,127,75, 
  /* [8][0][][] */ -12,60,-70,-20,-54,-127,-68,45, 
  /* [9][0][][] */ 62,-4,-44,-18,1,127,-28,105, 
  /* [10][0][][] */ -10,61,62,127,111,110,7,-37, 
  /* [11][0][][] */ -23,-72,-4,47,-127,88,-2,-28, 
  /* [12][0][][] */ 3,25,97,-79,56,-83,-127,-60, 
  /* [13][0][][] */ 19,60,-114,-127,-13,-93,-65,93, 
  /* [14][0][][] */ -58,-127,-8,-56,16,-91,18,-101, 
  /* [15][0][][] */ -4,82,65,109,100,127,-5,-22, 
  /* [16][0][][] */ 33,14,-39,-127,53,71,-71,82, 
  /* [17][0][][] */ -127,68,-126,50,46,86,-84,67, 
  /* [18][0][][] */ -127,71,20,-27,-100,12,-24,7, 
  /* [19][0][][] */ 127,5,-33,-21,103,-74,70,-89, 
  /* [20][0][][] */ 127,-60,29,-23,-51,21,69,17, 
  /* [21][0][][] */ 25,-36,-22,27,-14,33,127,24, 
  /* [22][0][][] */ 92,44,-127,-82,17,82,74,114, 
  /* [23][0][][] */ -33,49,-39,-103,25,-5,-127,9, 
  /* [24][0][][] */ 110,-39,-123,-16,127,-90,6,-1, 
  /* [25][0][][] */ -27,-58,82,-35,72,127,-9,-89, 
  /* [26][0][][] */ 8,-80,36,23,127,-50,-38,-61, 
  /* [27][0][][] */ -40,-115,45,73,32,-28,-36,127, 
  /* [28][0][][] */ -35,52,-127,-43,119,-127,-24,118, 
  /* [29][0][][] */ -69,38,127,-73,13,-23,44,17, 
  /* [30][0][][] */ 107,-76,79,-10,-60,-127,64,-26, 
  /* [31][0][][] */ 17,35,38,-1,-20,-12,-127,15, 
  /* [32][0][][] */ 14,-14,27,127,-34,-79,-40,-87, 
  /* [33][0][][] */ 93,-83,-33,90,-127,93,-30,-49, 
  /* [34][0][][] */ 4,-83,10,-73,-99,127,17,-19, 
  /* [35][0][][] */ 16,127,83,8,20,10,-49,0, 
  /* [36][0][][] */ 13,127,-93,-116,-81,-4,95,-75, 
  /* [37][0][][] */ 34,-2,45,9,30,127,60,4, 
  /* [38][0][][] */ -54,-91,97,45,13,4,-58,127, 
  /* [39][0][][] */ 11,53,127,-61,-33,43,-38,38, 
  /* [40][0][][] */ 7,-4,29,-4,-1,-19,127,3, 
  /* [41][0][][] */ -19,-18,-56,-127,-79,-74,-51,30, 
  /* [42][0][][] */ 46,-19,69,-47,-127,-39,-35,16, 
  /* [43][0][][] */ 53,1,16,42,-46,-127,113,42, 
  /* [44][0][][] */ -63,-127,-16,-68,-8,3,-17,-109, 
  /* [45][0][][] */ 12,92,84,73,45,127,-54,34, 
  /* [46][0][][] */ -122,-24,-3,80,112,43,-85,127, 
  /* [47][0][][] */ 8,92,-66,-27,1,-26,33,-127, 
};
const TfArray<48, float> quant13_scale = { 48, { 0.0028747064061462879, 0.0028446025680750608, 0.0022489938419312239, 0.0017433319007977843, 0.0025584890972822905, 0.0013686668826267123, 0.0025977690238505602, 0.00070033274823799729, 0.0020266720093786716, 0.0021581337787210941, 0.0020374078303575516, 0.0019100696081295609, 0.0034795859828591347, 0.00072369852568954229, 0.002065577544271946, 0.003216644050553441, 0.00077104062074795365, 0.0015443022130057216, 0.003299877280369401, 0.0021870874334126711, 0.0018979761516675353, 0.0040914691053330898, 0.0023861434310674667, 0.00083046936197206378, 0.0017327931709587574, 0.0016514459857717156, 0.0033666412346065044, 0.0028778400737792253, 0.00082673336146399379, 0.0045909886248409748, 0.0023598959669470787, 0.0041377083398401737, 0.0036957822740077972, 0.001657003303989768, 0.0013538106577470899, 0.0037068978417664766, 0.002279659966006875, 0.0027167259249836206, 0.0026886339765042067, 0.0022489211987704039, 0.0032731040846556425, 0.0036807693541049957, 0.0019544351380318403, 0.0032851698342710733, 0.0011025534477084875, 0.0026387313846498728, 0.0017019269289448857, 0.0023614689707756042, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { 17912, 5698, 17996, -9001, -18052, 13394, 3125, 17036, };
const TfArray<8, float> quant14_scale = { 8, { 5.429116208688356e-05, 5.3492352890316397e-05, 7.3139024607371539e-05, 9.0570916654542089e-05, 6.8724075390491635e-05, 7.3220646299887449e-05, 6.1915321566630155e-05, 5.5651496950304136e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-20,-9,-4,-30,-84,-39,-7,54,-40,-57,-22,-26,76,-60,9,4,-8,-1,17,31,-41,4,3,50,-1,9,23,10,63,-37,-88,26,-52,11,-31,33,-35,-4,31,-62,-21,-25,-51,-73,-80,14,-21, 
  /* [1][0][][] */ -88,-3,95,-76,70,47,57,17,-17,28,-15,101,26,-35,-127,-54,-104,-87,42,-14,8,84,-61,12,16,-113,30,104,44,-27,51,34,47,35,-8,37,-67,-23,8,6,-9,-37,-108,12,-35,-42,-110,23, 
  /* [2][0][][] */ 81,38,-20,-65,-45,3,-47,-83,29,30,-79,-49,-18,49,-55,38,0,64,12,4,45,49,6,-2,-127,18,24,-49,-1,29,28,-85,6,-42,19,16,-56,-54,8,26,-103,-111,-33,-42,-45,-91,26,17, 
  /* [3][0][][] */ 25,7,16,28,-94,-23,-3,45,-36,-67,-8,78,19,-12,-71,-56,-28,25,14,-52,-36,127,18,-51,26,51,58,-40,8,14,3,28,37,23,7,5,40,55,32,-12,44,-15,28,-37,-3,4,17,46, 
  /* [4][0][][] */ -43,15,-124,13,-3,89,14,32,-34,122,41,65,21,-65,-19,28,-24,-8,-16,40,-7,40,-82,23,7,-5,60,-12,41,-73,127,95,54,58,6,-51,-72,26,3,-19,48,29,21,29,48,39,32,68, 
  /* [5][0][][] */ -33,-7,39,-2,48,-66,-40,-29,-24,-53,4,-36,30,-4,-16,7,26,-12,-2,23,8,64,25,9,11,-10,-41,-15,-33,6,-127,-16,-46,-17,28,-25,-8,-35,-5,-9,-18,-5,-38,-13,22,28,0,34, 
  /* [6][0][][] */ 14,57,-15,52,-7,29,-51,39,-82,-40,56,18,52,20,48,7,8,-44,-30,41,12,67,28,-25,-75,2,-22,22,-92,-13,-89,11,14,-30,-42,-42,127,-5,-33,-59,58,41,36,-42,-61,-12,-59,-31, 
  /* [7][0][][] */ -50,3,-73,34,-28,-15,-1,2,-50,-41,38,67,40,15,-68,-59,-69,87,0,-6,38,-1,24,-35,-36,82,-56,-105,-34,-3,-92,-10,-26,-25,-45,0,-16,-37,-50,-12,-29,49,53,-25,-64,-55,127,-61, 
};
const TfArray<8, float> quant15_scale = { 8, { 0.0027402637060731649, 0.0026999448891729116, 0.0036915806122124195, 0.0045714289881289005, 0.0034687428269535303, 0.0036957003176212311, 0.0031250815372914076, 0.0028089245315641165, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 7135, 8319, 12977, 13980, 53846, -2937, -2211, 579, -2463, -13421, -2930, -1645, 21640, 13053, 9076, -431, 8986, 11232, -8, -6134, 1852, -3753, 11407, -322, 6222, 12074, 1975, 497, -77, 2126, 15454, 5902, 1872, -1813, 3925, 829, 13640, 5028, -1340, 1180, 10343, -8377, 7123, -434, -1385, 3855, 8295, -2942, };
const TfArray<48, float> quant16_scale = { 48, { 0.00015395971422549337, 0.00014405652473215014, 7.194756472017616e-05, 0.0001182695195893757, 3.4417469578329474e-05, 0.00022926955716684461, 0.00011097596143372357, 0.0001809330569813028, 0.00022829016961622983, 0.00013887482054997236, 0.00014327735698316246, 0.00016527247498743236, 5.5903772590681911e-05, 7.4554991442710161e-05, 0.00020979806140530854, 0.00011913692287635058, 0.00012860610149800777, 0.00011168791388627142, 0.00021760980598628521, 0.00012079551379429176, 0.00010075329191749915, 0.00016403594054281712, 0.00012135918950662017, 0.00012727019202429801, 0.00014677114086225629, 9.9863624200224876e-05, 0.0002485444420017302, 0.00018037490372080356, 0.00022744642046745867, 0.00013377855066210032, 0.0001265127066290006, 0.00014988590555731207, 0.00021515708067454398, 0.00047347950749099255, 0.00011312641436234117, 9.4732597062829882e-05, 0.00013010366819798946, 0.00014831125736236572, 0.00012478989083319902, 0.00011064441059716046, 0.00010603800183162093, 0.0001707144983811304, 0.00016576504276599735, 0.00020527774177026004, 0.00027300496003590524, 0.00018231448484584689, 0.00019950284331571311, 0.00017620649305172265, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -121,-48,53,-24,-107,28,-110,-6,2,127,43,6,-55,70,20,38,42,12,31,-40,-101,-31,36,42,-20,1,-14,-75,10,-109,77,31,-11,20,51,-40,8,-127,-24,127,-58,30,-19,-7,-5,5,12,-6, 19,-127,-3,13,-69,38,-127,-3,40,52,127,64,-59,-54,-105,-37,13,-41,114,61,15,56,-39,15,-74,6,-1,-127,-4,-70,-34,-127,2,13,-37,-127,-27,29,15,71,127,-17,-19,127,12,-127,19,-35, -111,-9,54,-11,-127,28,-57,-10,2,111,-7,-17,-31,60,25,74,-33,-10,27,-58,-98,-42,60,34,18,-30,12,-53,-38,-122,52,-19,-4,4,-41,-46,8,-88,21,78,-83,28,-13,2,7,5,1,55, 
  /* [0][1][][] */ 38,-33,13,-19,-66,-9,79,-24,-48,45,46,41,-127,-37,-61,127,-54,-4,47,103,18,64,-127,-10,-25,-94,-29,-66,127,41,29,107,-127,3,86,14,-10,27,-91,-102,64,-16,3,17,-127,41,-12,-60, 103,-17,-127,-127,37,127,-2,127,-127,-84,-18,127,-115,-127,-127,-118,-32,-127,-85,103,127,127,-86,73,-127,82,-125,70,-46,-43,-127,-101,23,127,-127,95,-127,-52,127,-56,-59,127,-127,-72,94,70,-127,-92, 64,-33,73,-16,-83,-46,20,-36,-30,32,14,-13,-45,-91,-62,95,-127,-39,38,127,-17,45,-27,-127,27,-97,127,-10,-41,127,-50,82,85,-42,-59,16,-20,6,10,-60,15,-21,-6,-12,-4,24,-11,127, 
  /* [0][2][][] */ -127,-27,29,-26,-22,12,104,-13,103,32,54,4,-23,63,18,-22,75,39,12,-47,-35,-39,41,18,-15,-16,-14,9,9,36,72,-9,-18,17,74,25,10,-41,-44,9,-31,12,4,-6,-6,-3,-30,22, -84,-89,52,-55,-92,-8,122,-13,91,26,82,-43,121,-108,-70,-35,-36,19,-127,5,-54,-2,-102,-25,12,-127,-9,35,3,88,12,-95,0,-43,-26,29,-19,68,38,-61,4,18,32,-41,21,-23,-21,21, -71,-7,31,-11,-88,28,68,-15,55,12,21,13,-112,23,12,-3,-43,35,15,-56,-35,-43,99,-60,5,-41,7,24,-12,52,33,-53,-18,14,-34,15,12,-35,-6,-41,-41,42,27,3,-5,-1,-6,-3, 
};
const TfArray<48, float> quant17_scale = { 48, { 0.0093640200793743134, 0.0087616955861449242, 0.0043759397231042385, 0.0071932980790734291, 0.0020933130290359259, 0.013944457285106182, 0.0067496947012841702, 0.011004571802914143, 0.013884889893233776, 0.0084465378895401955, 0.0087143052369356155, 0.010052075609564781, 0.0034001364838331938, 0.0045345267280936241, 0.012760177254676819, 0.0072460547089576721, 0.0078219817951321602, 0.0067929965443909168, 0.013235297054052353, 0.0073469323106110096, 0.0061279395595192909, 0.0099768685176968575, 0.0073812156915664673, 0.007740730419754982, 0.0089268013834953308, 0.006073828786611557, 0.015116779133677483, 0.010970624163746834, 0.013833572156727314, 0.0081365760415792465, 0.0076946588233113289, 0.0091162454336881638, 0.01308611873537302, 0.028797607868909836, 0.006880488246679306, 0.0057617533020675182, 0.007913065142929554, 0.0090204738080501556, 0.0075898752547800541, 0.0067295297048985958, 0.0064493622630834579, 0.010383066721260548, 0.010082034394145012, 0.012485245242714882, 0.016604498028755188, 0.011088592000305653, 0.012134009040892124, 0.01071709580719471, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 24551, -490, 3513, 3199, 4242, 748, 11589, -501, 20198, 12175, -1246, -389, 2709, 1640, 2207, 4547, 4729, 6562, -2534, -1182, 5938, 5407, 7859, 156, 5569, 5881, 15441, -1303, 7135, -892, 6823, 13970, 8162, 881, 3311, 4418, 3648, 4022, 2618, 3329, -30, 5175, 4103, 8011, 6753, 3415, 1316, 5100, };
const TfArray<48, float> quant18_scale = { 48, { 4.5562534069176763e-05, 0.00019035821605939418, 0.0001399517641402781, 0.00011856178025482222, 0.00015100902237463742, 0.00011979210103163496, 5.8393095969222486e-05, 0.00014725781511515379, 4.7230318159563467e-05, 6.1921804444864392e-05, 0.00013454444706439972, 0.0001063580930349417, 0.00018822631682269275, 0.0001806624059099704, 6.4549443777650595e-05, 0.00013810461678076535, 0.00011664536577882245, 0.0001148954252130352, 0.00015295585035346448, 9.4305803941097111e-05, 0.00011224463378312066, 7.5655589171219617e-05, 8.561377035221085e-05, 0.00016997268539853394, 0.0001162707048933953, 0.00013249974290374666, 6.1531070969067514e-05, 0.00019836417050100863, 0.00011777281906688586, 9.8585260275285691e-05, 0.00010230407497147098, 4.9196019972441718e-05, 0.00011413381434977055, 8.3995633758604527e-05, 0.00010624228889355436, 0.00016006367513909936, 0.00017755484441295266, 0.0001188623282359913, 0.0001756943529471755, 8.7433429143857211e-05, 0.0002041136467596516, 0.00012725383567158133, 0.00018738479411695153, 8.3380487922113389e-05, 0.00012710109876934439, 8.5394618508871645e-05, 0.00011092091881437227, 0.00014185356849338859, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 70,-70,33,-1,60,-127,-11,-62, 
  /* [1][0][][] */ -57,-53,-79,69,-127,58,-41,29, 
  /* [2][0][][] */ 60,-42,43,-10,127,-34,-7,71, 
  /* [3][0][][] */ -18,127,-29,123,7,16,-47,-47, 
  /* [4][0][][] */ -24,127,81,-47,40,17,-75,16, 
  /* [5][0][][] */ -88,35,-7,24,127,-29,75,-22, 
  /* [6][0][][] */ 101,-66,121,0,20,127,82,-18, 
  /* [7][0][][] */ -41,-39,41,69,102,11,-61,127, 
  /* [8][0][][] */ 22,-36,-56,-127,-1,117,-100,45, 
  /* [9][0][][] */ -127,11,-86,7,102,-28,-41,-1, 
  /* [10][0][][] */ -9,-81,56,16,-41,-77,-127,-84, 
  /* [11][0][][] */ 41,106,-24,-9,-24,-91,23,127, 
  /* [12][0][][] */ 35,-37,-90,58,-70,127,66,73, 
  /* [13][0][][] */ -44,-25,-127,15,-95,72,18,34, 
  /* [14][0][][] */ -64,127,-98,77,82,39,-20,89, 
  /* [15][0][][] */ -84,2,-9,3,81,74,-50,-127, 
  /* [16][0][][] */ 63,-117,-127,-46,-80,94,-75,0, 
  /* [17][0][][] */ 7,127,-108,-43,-80,23,61,-123, 
  /* [18][0][][] */ -56,-88,44,32,127,-77,-28,65, 
  /* [19][0][][] */ -60,104,-13,54,-6,-90,-127,56, 
  /* [20][0][][] */ 74,-14,33,-59,-12,-52,16,127, 
  /* [21][0][][] */ 49,-43,127,106,-43,123,106,-29, 
  /* [22][0][][] */ -39,127,2,21,125,-94,-125,-74, 
  /* [23][0][][] */ 23,-47,31,127,-17,-39,78,-48, 
  /* [24][0][][] */ -25,63,127,-64,-18,-34,8,-30, 
  /* [25][0][][] */ -64,-122,92,77,38,-8,-26,127, 
  /* [26][0][][] */ 61,-12,-127,-73,-91,38,28,112, 
  /* [27][0][][] */ 33,127,-121,-50,-41,17,41,-126, 
  /* [28][0][][] */ -13,38,-37,-90,-25,-24,-127,-49, 
  /* [29][0][][] */ -91,27,-109,-62,127,63,-27,-4, 
  /* [30][0][][] */ 75,-61,3,-9,-99,97,127,56, 
  /* [31][0][][] */ -86,94,-61,85,127,-106,-19,16, 
  /* [32][0][][] */ 11,90,65,-69,127,-29,-36,-97, 
  /* [33][0][][] */ -127,57,-116,2,53,29,-28,9, 
  /* [34][0][][] */ 75,-33,86,-112,-56,-127,59,98, 
  /* [35][0][][] */ -127,31,37,-4,-64,13,12,-8, 
  /* [36][0][][] */ 9,-47,-38,32,-22,19,127,44, 
  /* [37][0][][] */ -44,-15,-94,-39,-29,-127,-73,-5, 
  /* [38][0][][] */ -127,38,13,13,-123,10,60,9, 
  /* [39][0][][] */ -37,-20,35,-11,-47,104,-118,-127, 
  /* [40][0][][] */ 53,-127,3,72,-37,-66,112,67, 
  /* [41][0][][] */ 28,127,93,37,23,32,-105,-36, 
  /* [42][0][][] */ 31,127,-32,-8,-24,20,-4,-44, 
  /* [43][0][][] */ -67,68,-102,-127,11,27,-75,65, 
  /* [44][0][][] */ -39,16,-18,15,34,127,-3,-21, 
  /* [45][0][][] */ 4,81,-98,-31,-62,-96,-2,127, 
  /* [46][0][][] */ 17,127,-117,-21,-56,22,12,-106, 
  /* [47][0][][] */ 18,4,-8,-56,-62,-127,-32,46, 
};
const TfArray<48, float> quant19_scale = { 48, { 0.00099981424864381552, 0.0041771787218749523, 0.0030710706487298012, 0.0026016936171799898, 0.0033137088175863028, 0.0026286914944648743, 0.0012813652865588665, 0.0032313931733369827, 0.001036411733366549, 0.0013587984722107649, 0.0029524138662964106, 0.0023338985629379749, 0.0041303969919681549, 0.003964416217058897, 0.0014164588646963239, 0.0030305373948067427, 0.0025596402119845152, 0.0025212399195879698, 0.0033564295154064894, 0.0020694257691502571, 0.0024630716070532799, 0.001660169567912817, 0.0018786897417157888, 0.0037298433016985655, 0.0025514187291264534, 0.002907545305788517, 0.0013502243673428893, 0.0043528596870601177, 0.0025843807961791754, 0.0021633333526551723, 0.0022449381649494171, 0.0010795466369017959, 0.002504527335986495, 0.0018431817879900336, 0.0023313574492931366, 0.0035124020650982857, 0.003896224545314908, 0.0026082887779921293, 0.0038553981576114893, 0.0019186199642717838, 0.004479025024920702, 0.0027924301102757454, 0.0041119307279586792, 0.0018296830821782351, 0.0027890785131603479, 0.00187388074118644, 0.0024340243544429541, 0.0031128034461289644, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 5413, -1076, -2374, 2547, 1632, -16608, -5356, -12003, };
const TfArray<8, float> quant20_scale = { 8, { 0.00033652887213975191, 0.0001736531121423468, 0.00030202636844478548, 0.00013829936506226659, 0.00020687202049884945, 8.6758278484921902e-05, 0.00012400321429595351, 0.00011712034756783396, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -27,15,-2,34,-24,8,1,30,-43,-3,-36,-3,-19,11,31,3,-44,-17,25,-18,-23,127,-19,-23,-26,-33,6,34,-33,37,9,-21,-10,19,29,39,17,7,31,-25,3,-37,-15,-15,-21,20,26,11, 
  /* [1][0][][] */ 12,55,8,41,37,39,38,112,-44,-53,76,-32,-37,-27,28,-26,-25,-4,45,1,24,-127,-8,-65,5,6,-19,14,-12,5,-31,-61,-34,1,20,-11,16,58,64,-18,24,27,37,-28,-34,42,-1,52, 
  /* [2][0][][] */ 1,30,5,25,30,21,-30,33,23,9,61,19,10,-9,36,-56,18,23,-6,8,-18,127,5,-11,25,-42,-9,-4,-27,32,-24,-62,-18,7,21,-42,30,-16,-40,-29,28,-11,-13,-45,-35,32,10,17, 
  /* [3][0][][] */ -37,60,-10,-2,-17,45,71,-6,-4,5,13,16,-11,41,54,24,-13,0,7,6,53,-83,-5,29,-14,-4,-127,31,-35,-30,-9,2,-48,-13,21,27,33,-19,-35,-35,1,-18,13,29,25,-6,38,15, 
  /* [4][0][][] */ 17,-4,-49,12,16,-10,22,-6,-59,7,3,26,2,-15,-21,20,-29,39,-20,-3,6,-127,-4,-6,32,29,37,-40,48,-9,3,12,-10,55,24,-7,-17,20,-5,10,-15,-64,-81,15,37,40,2,-4, 
  /* [5][0][][] */ 3,60,100,3,7,26,15,-124,87,-29,-28,-11,95,-62,0,10,24,-52,43,-11,-39,127,6,-3,98,13,85,42,95,67,-3,-41,-82,-56,114,43,-62,-58,-6,-117,26,-16,60,75,-63,-57,-17,-41, 
  /* [6][0][][] */ 71,-3,-31,6,53,-13,47,-42,38,26,10,-25,-8,53,27,-66,17,-121,-16,-10,37,-7,-6,35,-45,-44,54,-17,51,-48,127,48,52,52,35,-58,-50,9,51,-24,-36,28,-65,67,46,16,34,-40, 
  /* [7][0][][] */ -25,41,46,73,-13,8,63,109,55,44,9,84,-61,-19,26,-8,91,-9,-44,-20,-5,-127,6,-103,-80,89,68,26,17,41,19,-19,31,-20,10,37,-12,117,-93,-29,6,-12,41,-25,-46,10,56,17, 
};
const TfArray<8, float> quant21_scale = { 8, { 0.014302477240562439, 0.007380257360637188, 0.012836121022701263, 0.0058777229860424995, 0.0087920604273676872, 0.0036872269120067358, 0.0052701365202665329, 0.0049776146188378334, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 26400, 28777, 13977, 26641, 12705, 15569, 26763, 13593, 70446, -2307, 1113, 25394, 15723, -3441, 15055, 397, 520, 46498, 24676, 1581, 2661, -19425, 2710, -3035, 52799, 39017, -1525, 113, -1894, 22898, -2740, 1774, -17137, 27540, 27717, 31467, 38524, 26516, -580, -1387, 10272, 52046, 2782, -2137, -1385, -3093, 31339, 12914, };
const TfArray<48, float> quant22_scale = { 48, { 4.6430246584350243e-05, 7.2062917752191424e-05, 7.9235062003135681e-05, 5.5964595958357677e-05, 7.0708876592107117e-05, 6.2508399423677474e-05, 0.00011230514064664021, 0.00011273425479885191, 2.7520693038241006e-05, 5.9560941735981032e-05, 5.9217389207333326e-05, 5.3566498536383733e-05, 0.00011470469326013699, 3.8767302612541243e-05, 8.3981125499121845e-05, 5.1755392632912844e-05, 2.8671314794337377e-05, 4.3972384446533397e-05, 4.8066769522847608e-05, 0.00010377715079812333, 5.1261751650599763e-05, 0.00013907971151638776, 8.833217725623399e-05, 9.2262678663246334e-05, 3.3103595342254266e-05, 6.6722059273160994e-05, 5.6499469792470336e-05, 9.0516630734782666e-05, 4.5270084228832275e-05, 6.8438414018601179e-05, 0.00016636755026411265, 0.0001474024320486933, 7.4342686275485903e-05, 5.7212186220567673e-05, 7.5385229138191789e-05, 8.033608173718676e-05, 6.1178187024779618e-05, 0.00011742693459382281, 0.00013895274605602026, 7.6514013926498592e-05, 0.00010287965415045619, 3.1779069104231894e-05, 5.6380602472927421e-05, 4.8983038141159341e-05, 0.00025719052064232528, 0.00011345904931658879, 6.276955537032336e-05, 7.915964670246467e-05, } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -21,-60,-73,-75,-51,28,-47,-60,-71,79,24,-76,-39,-7,-92,69,76,-71,-76,90,75,47,-83,92,-107,-51,62,48,53,-96,100,95,45,-81,-34,-35,-117,-47,127,50,-70,-28,24,79,108,105,-61,-35, -75,-96,-101,-122,-115,18,-122,-92,-63,97,63,-96,-45,77,-90,118,100,-92,-115,-27,89,95,87,99,-69,-67,107,97,95,-90,115,127,81,-127,-69,-54,-127,-68,127,84,-126,-53,68,100,127,82,-102,-83, -12,-39,-49,-65,-72,21,-75,-44,-56,72,27,-55,-11,67,-53,60,56,-47,-49,-53,87,-127,-86,42,-26,-23,48,5,38,-59,78,70,22,-28,-26,-15,-100,-31,26,41,-82,-33,28,70,73,37,-48,-9, 
  /* [0][1][][] */ -37,-99,-49,-84,-127,-42,-57,-85,-116,111,72,-127,-65,25,-127,67,109,-113,-70,127,117,83,-86,127,-127,-91,72,82,79,-100,77,72,71,-70,-104,-78,-104,-85,97,83,-127,-94,43,67,44,127,-53,-59, -127,-127,-127,-127,-114,-127,-127,-127,-127,127,127,-125,-127,127,-86,127,127,-127,-127,-60,127,103,127,123,-99,-127,127,127,127,-127,127,125,127,-106,-127,-127,-97,-127,110,127,-123,-127,127,127,62,83,-127,-127, -67,-45,-87,-106,-119,-111,-89,-75,-104,65,63,-57,-42,84,-46,53,121,-58,-43,-104,111,-123,-71,65,-29,-72,42,30,74,-78,83,62,44,-71,-53,-62,-91,-73,33,58,-88,-94,46,97,47,10,-53,-52, 
  /* [0][2][][] */ -7,1,-18,-22,-90,0,-56,-43,-60,69,19,-39,-12,-11,-92,14,42,-36,-15,33,84,28,-57,50,-49,-38,41,10,35,-46,57,26,24,-89,-12,-27,-53,-34,19,60,-113,-66,19,19,55,47,-64,-22, -62,3,-58,-57,-92,-91,-84,-42,-78,107,37,-47,-25,62,-81,41,64,-22,-28,-80,87,10,28,-1,-23,-44,51,42,49,-81,32,40,55,-102,-38,-58,-44,-38,16,78,-89,-97,69,58,72,-7,-94,-31, -33,30,-41,-41,-60,-78,-61,-41,-43,72,5,-52,5,39,-24,33,68,-5,-13,-60,24,-68,-62,21,-4,-27,25,10,23,-52,24,46,16,-72,-18,-26,-26,-26,7,53,-107,-45,26,42,37,-17,-51,-2, 
};
const TfArray<48, float> quant23_scale = { 48, { 0.0027604543138295412, 0.0042844139970839024, 0.0047108251601457596, 0.0033273075241595507, 0.0042039109393954277, 0.0037163614761084318, 0.0066769667901098728, 0.0067024789750576019, 0.0016362096648663282, 0.003541124053299427, 0.003520698519423604, 0.0031847315840423107, 0.0068196291103959084, 0.0023048631846904755, 0.0049929963424801826, 0.0030770543962717056, 0.0017046184511855245, 0.0026143251452594995, 0.0028577519115060568, 0.0061699454672634602, 0.0030477056279778481, 0.0082688163965940475, 0.0052516832947731018, 0.0054853660985827446, 0.0019681344274431467, 0.003966879565268755, 0.0033591077663004398, 0.0053815571591258049, 0.0026914782356470823, 0.004068923182785511, 0.0098911821842193604, 0.008763633668422699, 0.0044199549593031406, 0.0034014815464615822, 0.0044819377362728119, 0.0047762850299477577, 0.0036372754257172346, 0.0069814766757190228, 0.0082612680271267891, 0.004549048375338316, 0.0061165858060121536, 0.0018893862143158913, 0.0033520406577736139, 0.0029122275300323963, 0.015290952287614346, 0.0067455708049237728, 0.0037318882532417774, 0.0047063413076102734, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2244, 5776, 2482, -350, -687, 68, 12448, 4332, 3074, -4811, 2613, 389, 5860, -34, 2310, -2065, -182, 6214, 2209, 2050, -1492, 36941, 2223, -1402, 1158, 7900, 3618, -2193, 178, -37, -4021, -3035, 3105, 2071, 7470, 12657, 8371, 8473, -4402, -2425, -2006, 3042, 1636, 920, -3033, -3658, 5921, 1343, };
const TfArray<48, float> quant24_scale = { 48, { 0.00014461869432125241, 0.00011914095375686884, 0.00017103961727116257, 0.00018819414253812283, 0.00018737193022388965, 0.00015829542826395482, 7.04520134604536e-05, 0.00013063717051409185, 0.00014745087537448853, 0.00011381829244783148, 0.00014563130389433354, 0.00017010225565172732, 0.00011040049139410257, 0.00032180693233385682, 0.00019231470650993288, 0.00015674487804062665, 0.00031095766462385654, 0.00010476584429852664, 0.00012742260878439993, 0.00015174891450442374, 0.00017019562073983252, 4.2746323742903769e-05, 0.00018329154409002513, 0.00014412231394089758, 0.0002083306317217648, 0.00010447195381857455, 0.00015270123549271375, 0.00018327344150748104, 0.00020325054356362671, 0.0002338164922548458, 0.00012997811427339911, 0.00012990704271942377, 0.00022016903676558286, 0.00018294915207661688, 0.00011007017747033387, 7.1986120019573718e-05, 0.00011154856474604458, 9.9598189990501851e-05, 0.00012048575445078313, 0.0001261977304238826, 0.00017664473853074014, 0.00017215032130479813, 0.00013056908210273832, 0.00019860817701555789, 0.00013028847752138972, 0.00012200430501252413, 0.0001112804384320043, 0.00011530730262165889, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -42,68,-58,77,46,127,55,22, 
  /* [1][0][][] */ 46,-127,-98,-40,-38,69,57,-28, 
  /* [2][0][][] */ -37,52,-41,-127,-49,-115,-40,-80, 
  /* [3][0][][] */ -9,127,71,27,2,-79,-33,27, 
  /* [4][0][][] */ -127,58,-117,78,16,-28,-53,-68, 
  /* [5][0][][] */ 79,-96,-127,14,9,-4,57,-32, 
  /* [6][0][][] */ -13,-106,-69,29,-127,-59,-57,98, 
  /* [7][0][][] */ -26,-35,-7,-42,51,2,-26,127, 
  /* [8][0][][] */ 20,26,-114,-116,38,-28,-127,-108, 
  /* [9][0][][] */ -127,60,0,89,1,60,87,13, 
  /* [10][0][][] */ -25,-12,100,-127,-28,56,9,45, 
  /* [11][0][][] */ 121,-8,119,47,-33,42,70,127, 
  /* [12][0][][] */ 45,30,16,-66,52,127,103,-117, 
  /* [13][0][][] */ 31,54,-43,51,-6,-127,-39,61, 
  /* [14][0][][] */ 11,-127,-20,-27,17,70,32,-26, 
  /* [15][0][][] */ -93,2,5,-68,67,127,-87,-25, 
  /* [16][0][][] */ 16,-42,118,18,-18,19,127,74, 
  /* [17][0][][] */ 60,28,62,16,-23,-96,-44,-127, 
  /* [18][0][][] */ -118,13,-97,-29,-21,-127,16,-105, 
  /* [19][0][][] */ 51,19,110,-37,-56,24,88,127, 
  /* [20][0][][] */ 18,127,57,-15,22,35,34,16, 
  /* [21][0][][] */ -30,13,16,-100,-56,127,7,-18, 
  /* [22][0][][] */ 30,14,76,-2,-48,15,127,75, 
  /* [23][0][][] */ -59,127,69,56,-85,-98,-116,109, 
  /* [24][0][][] */ -23,2,82,14,-113,127,-8,-73, 
  /* [25][0][][] */ -43,25,87,32,-127,37,-80,23, 
  /* [26][0][][] */ -47,-127,24,-43,6,43,-1,-22, 
  /* [27][0][][] */ -19,59,38,56,-28,127,-22,-7, 
  /* [28][0][][] */ 17,-127,51,20,55,120,36,32, 
  /* [29][0][][] */ 24,127,-17,20,-69,-53,-24,22, 
  /* [30][0][][] */ -51,75,93,74,-127,-54,-42,-107, 
  /* [31][0][][] */ 14,73,28,51,-45,-5,13,-127, 
  /* [32][0][][] */ -22,-28,-64,56,-127,-27,-53,10, 
  /* [33][0][][] */ 91,11,68,71,-28,61,75,127, 
  /* [34][0][][] */ 111,13,-127,-53,-58,9,55,53, 
  /* [35][0][][] */ 119,84,77,-127,-55,-78,19,105, 
  /* [36][0][][] */ -32,-99,127,36,64,50,8,-37, 
  /* [37][0][][] */ -10,13,-16,2,-6,-61,-45,127, 
  /* [38][0][][] */ 127,2,60,9,2,8,-54,34, 
  /* [39][0][][] */ 71,80,-127,-112,-83,89,52,-74, 
  /* [40][0][][] */ -39,127,-45,50,-61,-12,-59,-16, 
  /* [41][0][][] */ -127,42,-36,-56,65,49,11,-86, 
  /* [42][0][][] */ 38,-42,-6,-22,-30,127,8,99, 
  /* [43][0][][] */ -72,46,127,9,63,20,-37,5, 
  /* [44][0][][] */ 5,127,2,22,-47,-53,-20,3, 
  /* [45][0][][] */ -112,97,57,-127,-82,-4,-57,-67, 
  /* [46][0][][] */ 48,-52,-16,30,30,12,-127,68, 
  /* [47][0][][] */ -101,-127,29,50,47,-88,4,94, 
};
const TfArray<48, float> quant25_scale = { 48, { 0.0025444529019296169, 0.002096191979944706, 0.0030093083623796701, 0.0033111290540546179, 0.0032966628205031157, 0.0027850843034684658, 0.0012395480880513787, 0.0022984589450061321, 0.0025942830834537745, 0.0020025440026074648, 0.002562269102782011, 0.0029928162693977356, 0.0019424103666096926, 0.0056619415991008282, 0.0033836271613836288, 0.0027578037697821856, 0.0054710572585463524, 0.0018432731740176678, 0.0022419013548642397, 0.0026699036825448275, 0.0029944588895887136, 0.00075208814814686775, 0.0032248715870082378, 0.0025357194244861603, 0.003665414871647954, 0.0018381024710834026, 0.0026866588741540909, 0.0032245530746877193, 0.0035760346800088882, 0.0041138185188174248, 0.0022868632804602385, 0.0022856129799038172, 0.0038737021386623383, 0.0032188475597649813, 0.0019365987973287702, 0.0012665395624935627, 0.0019626098219305277, 0.0017523523420095444, 0.0021198526956140995, 0.0022203505504876375, 0.0031079261098057032, 0.0030288505367934704, 0.002297261031344533, 0.0034943558275699615, 0.0022923240903764963, 0.0021465704776346684, 0.0019578924402594566, 0.0020287418738007545, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 9181, -16824, 4459, 6036, 5025, -4331, 2871, 12565, };
const TfArray<8, float> quant26_scale = { 8, { 0.00019598312792368233, 0.00014733093848917633, 9.0821944468189031e-05, 0.00011491480108816177, 0.00021261934307403862, 9.8692187748383731e-05, 0.00015375434304587543, 7.927864498924464e-05, } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -22,-10,-12,-32,-74,-14,-7,-24,60,12,2,-3,4,17,-16,11,-35,17,-23,-17,5,14,-22,0,24,-10,80,12,-13,-87,-20,10,0,40,127,-7,-17,-40,30,-35,22,9,-2,-24,-21,-4,-14,-89, 
  /* [1][0][][] */ 27,-35,-6,72,-1,-2,23,43,71,81,41,-57,-56,83,7,4,-5,-27,14,-21,-62,46,-46,31,96,22,-26,42,31,-1,127,35,-12,-33,-28,5,-17,17,-22,-13,6,-16,14,20,-4,38,33,31, 
  /* [2][0][][] */ -60,-12,-79,100,-68,-77,16,-71,-83,46,42,-98,-29,-14,-39,6,112,40,-73,-39,-56,-35,-40,15,73,-35,110,0,88,-23,-73,4,12,-19,37,3,-39,35,1,-94,52,-76,-49,-127,-14,-79,-56,90, 
  /* [3][0][][] */ 23,-45,15,-37,40,-20,-7,-72,51,-58,5,-24,-77,-75,-19,2,15,-14,43,-33,-15,29,-76,-3,71,-35,52,16,3,3,5,-19,-38,33,22,-31,-56,23,3,-4,127,22,-50,38,-51,50,-15,-48, 
  /* [4][0][][] */ 16,7,8,10,10,32,-12,-9,46,17,11,-44,4,2,-68,15,-3,14,28,-16,-28,28,0,37,31,-1,-30,1,41,-9,-11,21,-8,-11,25,14,-127,-6,50,8,12,-10,-7,21,-32,49,-30,-100, 
  /* [5][0][][] */ -45,-91,24,103,-23,-12,-58,89,-93,76,54,34,-73,13,59,-34,-17,25,33,-5,-8,31,42,46,-56,2,-33,28,-42,-92,42,12,-111,-57,-34,-10,127,-13,-23,11,-35,-19,69,104,17,36,40,38, 
  /* [6][0][][] */ 88,-1,-16,-11,86,-32,-30,-64,41,25,36,-34,-11,6,14,4,0,0,-7,-26,-26,18,18,26,59,-55,44,-2,-23,100,-21,7,42,30,-127,-15,-81,-33,23,-56,-12,-1,-6,-89,-11,2,-14,-13, 
  /* [7][0][][] */ -40,-86,55,-59,14,127,44,-61,-11,-104,-61,-8,-12,-37,-71,12,5,-51,115,60,47,-55,12,-5,-33,4,111,-9,64,22,2,-13,-36,-33,-61,118,-117,111,-38,-34,-54,49,10,-84,19,-27,65,-42, 
};
const TfArray<8, float> quant27_scale = { 8, { 0.0096209654584527016, 0.0072325915098190308, 0.0044585205614566803, 0.005641257856041193, 0.010437650606036186, 0.0048448769375681877, 0.0075479215011000633, 0.0038918508216738701, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 10432, 3689, -2761, 7018, -1271, -2470, 6321, -1627, 266, 4266, -991, 359, -1700, 12289, 3553, -99, -5543, -561, -795, 2084, 11756, -571, -12213, 1129, -4518, 2250, 321, 8, -1764, -244, -2650, 308, 20301, 332, 79, 1259, -1595, 2413, -311, 1472, 19080, 374, 3884, -809, 1124, -287, -5780, 6832, };
const TfArray<48, float> quant28_scale = { 48, { 0.00022235863434616476, 0.00032778721651993692, 0.00017354189185425639, 0.0002737836039159447, 0.00028172222664579749, 0.00047935204929672182, 0.0001162459739134647, 0.00021670629212167114, 7.8292265243362635e-05, 0.0002097147807944566, 0.00031546043464913964, 0.00052750331815332174, 0.00024366975412704051, 0.00018047420599032193, 0.00024902142467908561, 0.00036777710192836821, 6.0163089074194431e-05, 0.0011477728839963675, 0.00034444208722561598, 0.00017589687195140868, 7.5239076977595687e-05, 0.00056205451255664229, 0.00012579603935591877, 0.00016136228805407882, 0.00027724949177354574, 0.00023496786889154464, 0.00023747181694488972, 0.00021298427600413561, 0.00036978544085286558, 0.00024825020227581263, 0.00015607368550263345, 0.00043134379666298628, 5.2622192015405744e-05, 0.00029443387757055461, 0.00013589239097200334, 0.00057902926346287131, 0.00016380619490519166, 0.0001925712131196633, 0.00080013758270069957, 0.0002544088929425925, 5.1773964514723048e-05, 0.00027249733102507889, 0.00012691077427007258, 0.00015815396909601986, 0.00022484113287646323, 0.00029810727573931217, 9.5317547675222158e-05, 0.00037002944736741483, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -86,40,-29,-62,-3,-10,21,-13,15,-22,6,48,-4,-102,-123,13,127,-5,65,34,-97,-53,112,-127,-6,-57,-8,113,-15,9,18,127,-36,-13,-12,7,13,-35,-11,25,102,-67,-56,54,72,-112,-36,-8, -25,-127,48,-123,3,-12,-71,127,83,-84,23,46,19,-127,-99,1,-24,10,-28,-81,-78,-1,76,126,12,-3,8,127,22,-10,-2,-103,-127,20,-5,-21,127,-127,48,-4,-12,-114,-79,35,109,72,41,-34, -37,0,31,-26,2,39,13,68,12,21,4,27,23,25,-85,16,81,11,-24,14,-123,57,43,10,-8,69,-1,-50,-16,-6,21,-38,-68,-2,1,17,-28,118,-20,17,106,-59,-4,-23,55,44,-60,-14, 
  /* [0][1][][] */ -31,-23,-111,-13,-23,28,3,-1,45,-64,0,-107,-35,-52,-127,127,88,-3,127,74,-24,127,127,95,10,-64,-37,14,57,-45,31,-106,24,-31,-51,7,20,-104,38,27,87,127,-36,-2,-77,127,76,-38, -127,50,127,127,127,-106,-127,0,-16,-127,-127,-127,127,-19,2,30,22,-127,-107,-127,126,-12,-88,-119,127,-35,127,-52,127,127,-43,76,-126,-127,127,-127,77,-98,-127,-127,30,90,-114,23,-127,-69,127,127, -12,10,12,24,44,127,-25,58,88,17,59,-56,-21,-19,-64,-21,64,41,-15,47,-103,-100,95,-34,13,127,12,-2,53,24,127,23,25,1,56,24,-24,65,43,-3,22,59,105,-5,-59,-49,53,-9, 
  /* [0][2][][] */ -33,0,-59,-7,1,-10,8,-12,41,22,9,48,-8,-19,93,11,15,-5,70,5,-83,-2,75,32,-15,-64,-11,-69,5,-20,-22,-35,-4,44,-7,10,-39,8,-11,10,31,-1,-38,-50,-29,13,-58,-37, -7,-46,47,3,-73,-15,-103,-76,127,73,53,58,-13,-44,46,5,99,90,-28,-22,-127,-2,2,-35,-10,-57,-67,-82,-10,-42,75,31,-88,40,-62,-5,23,-112,28,49,-127,-15,-127,127,31,-1,60,-44, 28,-9,23,-3,-34,28,7,-77,11,-3,-15,23,0,16,118,-124,56,-28,-18,-15,-101,11,7,-17,-13,23,-34,5,4,-35,22,14,-24,40,-43,13,-101,76,-23,32,22,-28,29,58,-32,-10,-93,-23, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.0094502419233322144, 0.013930955901741982, 0.0073755299672484398, 0.011635802686214447, 0.011973194777965546, 0.020372461527585983, 0.0049404539167881012, 0.0092100175097584724, 0.0033274211455136538, 0.0089128781110048294, 0.013407068327069283, 0.02241889014840126, 0.010355964303016663, 0.0076701538637280464, 0.010583410039544106, 0.015630526468157768, 0.0025569312274456024, 0.048780348151922226, 0.014638788998126984, 0.0074756168760359287, 0.0031976606696844101, 0.023887315765023232, 0.0053463312797248363, 0.0068578971549868584, 0.011783103458583355, 0.0099861342459917068, 0.010092551819980145, 0.0090518314391374588, 0.015715880319476128, 0.010550633072853088, 0.0066331317648291588, 0.018332110717892647, 0.002236443106085062, 0.012513439171016216, 0.0057754265144467354, 0.02460874430835247, 0.0069617629051208496, 0.0081842765212059021, 0.034005846828222275, 0.01081237755715847, 0.0022003934718668461, 0.011581136845052242, 0.0053937076590955257, 0.0067215436138212681, 0.0095557477325201035, 0.012669559568166733, 0.0040509956888854504, 0.015726251527667046, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 5090, 2312, 4783, 14057, 552, 9450, 2142, 2902, 2887, 6965, 3446, 9786, 4544, 2437, 5358, -273, 167, -3752, 8100, 3832, 1303, 7182, 12603, 878, 4656, 8536, 3634, -115, -2553, 2702, 9187, 4953, 2015, 2027, 1332, -1064, 1585, 2645, 576, 2894, 1927, 7132, 2363, 1291, 2825, 2170, -429, 24165, };
const TfArray<48, float> quant30_scale = { 48, { 0.00018974731210619211, 0.00024464220041409135, 0.00014271953841671348, 8.1398153270129114e-05, 0.00061773968627676368, 8.3097904280293733e-05, 0.00027970111113972962, 0.00018699371139518917, 0.00016995012992992997, 0.00011394436296541244, 0.00019112323934677988, 7.168132287915796e-05, 0.00017637583368923515, 0.0001510655420133844, 0.00011370902939233929, 0.00014204905892256647, 0.00026620677090249956, 0.0002039544633589685, 0.00011978303518844768, 0.00027801524265669286, 0.00050705717876553535, 0.0001100426961784251, 7.2849186835810542e-05, 0.00027713499730452895, 0.00012575757864397019, 0.00011896761861862615, 0.00018920787260867655, 0.00015765539137646556, 0.00019518354383762926, 0.00036721539800055325, 9.4748553237877786e-05, 0.00016339142166543752, 0.00028179900255054235, 0.00017914918134920299, 0.00043592983274720609, 0.00018104500486515462, 0.00014762778300791979, 0.00014576021931134164, 0.00013543879322241992, 0.00022847167565487325, 0.0001866111415438354, 0.00011310636909911409, 0.00014491693582385778, 0.00020045318524353206, 0.00018864699814002961, 0.00025821456802077591, 0.0002343836531508714, 4.4450960558606312e-05, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -119,-8,32,-99,-127,119,-8,-62, 
  /* [1][0][][] */ 85,10,13,-15,-2,66,-127,38, 
  /* [2][0][][] */ -39,43,-100,101,-64,127,29,61, 
  /* [3][0][][] */ 87,-25,-22,67,6,-65,10,127, 
  /* [4][0][][] */ -87,-1,0,19,-21,-39,127,4, 
  /* [5][0][][] */ 49,125,35,67,-127,-49,17,-29, 
  /* [6][0][][] */ -2,-78,36,127,3,-92,-9,38, 
  /* [7][0][][] */ 126,-6,98,-3,-67,38,68,127, 
  /* [8][0][][] */ -33,-127,45,50,98,-23,-40,10, 
  /* [9][0][][] */ -83,-88,23,-18,-26,2,-51,127, 
  /* [10][0][][] */ -44,-127,13,79,67,91,-10,-7, 
  /* [11][0][][] */ -118,-100,41,-66,66,49,-51,127, 
  /* [12][0][][] */ 76,-21,81,-77,23,-127,71,3, 
  /* [13][0][][] */ 29,19,28,127,-23,11,45,-67, 
  /* [14][0][][] */ -43,-6,39,10,113,-9,0,127, 
  /* [15][0][][] */ -103,125,41,113,84,127,-55,101, 
  /* [16][0][][] */ -7,-31,-51,-127,-53,49,12,58, 
  /* [17][0][][] */ 14,127,-4,56,-27,-40,2,14, 
  /* [18][0][][] */ 6,24,-2,-127,-33,-91,14,-7, 
  /* [19][0][][] */ 46,-67,-127,-94,-95,124,16,-17, 
  /* [20][0][][] */ 22,0,13,-7,127,19,31,-31, 
  /* [21][0][][] */ -127,-89,-69,-92,35,25,47,-25, 
  /* [22][0][][] */ -65,-36,82,127,32,-35,-42,108, 
  /* [23][0][][] */ 18,41,-27,127,92,34,40,92, 
  /* [24][0][][] */ 122,7,-127,-29,8,-26,38,-46, 
  /* [25][0][][] */ 15,0,-54,-12,69,-22,-127,-73, 
  /* [26][0][][] */ 115,5,111,-43,-79,39,54,127, 
  /* [27][0][][] */ 15,-70,-46,127,38,-12,-17,-125, 
  /* [28][0][][] */ -56,127,83,65,57,-28,-31,-1, 
  /* [29][0][][] */ 2,1,55,2,-73,-2,127,61, 
  /* [30][0][][] */ -60,-80,49,-73,-67,127,53,52, 
  /* [31][0][][] */ 96,32,98,-14,-88,64,87,127, 
  /* [32][0][][] */ -127,-8,-22,31,-17,13,122,31, 
  /* [33][0][][] */ -117,127,54,75,32,43,-92,13, 
  /* [34][0][][] */ 110,6,22,-15,8,49,-127,18, 
  /* [35][0][][] */ 4,-9,18,24,-37,35,15,-127, 
  /* [36][0][][] */ 32,-7,-51,-127,51,-10,49,110, 
  /* [37][0][][] */ 45,-48,-47,-66,-13,42,77,-127, 
  /* [38][0][][] */ 37,127,25,118,-78,-84,-22,-30, 
  /* [39][0][][] */ 102,-2,110,-14,-91,39,119,127, 
  /* [40][0][][] */ -77,-92,127,99,-7,-38,-92,39, 
  /* [41][0][][] */ 43,-18,16,19,13,-82,-13,127, 
  /* [42][0][][] */ 51,-112,-90,-112,-49,66,32,-127, 
  /* [43][0][][] */ 110,-6,118,-25,-99,-7,127,122, 
  /* [44][0][][] */ -92,-90,-72,127,82,-8,-63,31, 
  /* [45][0][][] */ 127,-18,72,-15,-32,33,-8,63, 
  /* [46][0][][] */ 42,-117,-10,65,127,-7,53,18, 
  /* [47][0][][] */ 93,127,-20,127,-54,-80,48,-102, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0033283184748142958, 0.0042912187054753304, 0.0025034141726791859, 0.0014277882874011993, 0.010835644789040089, 0.0014576032990589738, 0.0049061798490583897, 0.0032800182234495878, 0.0029810601845383644, 0.0019986745901405811, 0.0033524534665048122, 0.0012573472922667861, 0.0030937721021473408, 0.0026498094666749239, 0.0019945467356592417, 0.002491653198376298, 0.0046694781631231308, 0.0035775231663137674, 0.0021010895725339651, 0.0048766080290079117, 0.0088941855356097221, 0.0019302362343296409, 0.0012778325472027063, 0.004861168097704649, 0.0022058878093957901, 0.0020867865532636642, 0.0033188562374562025, 0.0027654008008539677, 0.0034236742649227381, 0.0064412495121359825, 0.0016619648085907102, 0.0028660153038799763, 0.0049429782666265965, 0.0031424188055098057, 0.0076465555466711521, 0.0031756730750203133, 0.0025895086582750082, 0.0025567500852048397, 0.0023757040034979582, 0.0040075746364891529, 0.003273307578638196, 0.001983975525945425, 0.0025419581215828657, 0.0035161080304533243, 0.0033090182114392519, 0.0045292885042726994, 0.0041112755425274372, 0.00077970512211322784, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 2872, 3893, 2706, 9821, 3274, 4823, 1153, -2093, };
const TfArray<8, float> quant32_scale = { 8, { 0.00014360886416397989, 0.0001216457603732124, 0.00013726323959417641, 0.00011709656246239319, 7.2767848905641586e-05, 0.00010695389937609434, 0.00015821568376850337, 0.00034834566758945584, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -26,45,-32,6,-47,-25,-78,18,11,23,40,43,40,10,-42,9,-40,42,17,-59,34,40,-127,7,-6,7,-31,53,-3,-6,27,19,20,-20,37,23,-4,107,-66,-14,-9,22,-31,32,12,14,23,-6, 
  /* [1][0][][] */ -83,-106,-54,5,86,-34,-127,62,-19,-34,-5,-76,-19,87,0,-12,126,-127,-7,-20,-61,-2,-3,-25,15,-14,-20,-47,32,-7,-114,-19,24,-65,-80,-101,38,9,-100,-9,-1,41,4,78,-21,15,0,51, 
  /* [2][0][][] */ 5,-73,3,57,120,12,99,-5,-42,-32,-6,-57,2,-29,13,28,-30,-99,50,-59,-1,-64,-61,12,-79,56,80,-97,-39,-8,-61,-43,16,3,-76,-54,-6,127,78,-40,-18,6,-33,-77,51,35,45,-32, 
  /* [3][0][][] */ 0,5,25,-12,35,31,27,-92,26,16,-16,14,7,-109,-11,5,-32,10,-18,-5,-1,46,-127,1,22,-87,28,24,47,-13,-30,50,1,4,2,-31,-91,-40,2,-18,-2,2,43,7,-18,-1,6,-47, 
  /* [4][0][][] */ 39,-55,10,72,50,11,-28,-4,-35,-10,17,-29,74,32,-17,33,-49,-60,64,31,36,-45,127,21,-26,18,-57,-22,-8,13,-74,-46,83,-20,-41,-59,-39,-40,-17,4,-63,93,3,-8,59,76,43,28, 
  /* [5][0][][] */ -67,-15,-42,52,-3,20,-6,-52,-64,-40,-13,-21,11,29,-64,9,127,-21,55,-83,29,-92,-1,0,91,-117,-101,-16,56,-52,30,-76,14,-57,-43,24,-79,-12,18,-31,-45,21,100,53,46,13,22,-50, 
  /* [6][0][][] */ -30,7,-35,35,-21,80,-73,7,-22,-4,-127,9,44,36,123,22,16,4,43,-7,34,-12,-43,-12,9,3,-65,13,1,-48,3,-22,30,-39,11,3,2,-5,-52,-18,-35,45,-22,26,30,30,34,3, 
  /* [7][0][][] */ 28,-5,37,-20,4,7,11,-11,12,2,-8,-5,-13,-9,-2,-16,12,-5,-25,-21,-24,17,127,14,4,-16,2,7,5,-12,-24,17,-4,18,-3,-22,-8,13,4,25,3,-5,7,0,-19,-4,-26,13, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.0061033768579363823, 0.0051699448376893997, 0.0058336872607469559, 0.0049766036681830883, 0.0030926335602998734, 0.0045455405488610268, 0.0067241662181913853, 0.014804691076278687, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 6459, 1123, -1694, 424, 12830, 6822, -1210, 3848, 5282, 261, -489, 7, 395, -1239, -1182, 260, 11225, 1510, -816, 36582, 905, 15057, 741, 2006, -238, -8118, 10457, 860, 387, -422, 1281, 9473, 722, -2247, -506, -655, 13216, -1861, 4392, 69, 407, -499, 20541, -5872, 481, -152, 416, -954, };
const TfArray<48, float> quant34_scale = { 48, { 5.5596265156054869e-05, 0.00014823027595411986, 0.0011314247967675328, 0.0010194339556619525, 9.8746575531549752e-05, 0.00014197136624716222, 9.4646471552550793e-05, 0.00032689076033420861, 0.00012270051229279488, 0.0002634842530824244, 4.4875752791995183e-05, 0.00047552757314406335, 0.0010281665017828345, 0.00013390603999141604, 0.00015986683138180524, 0.0035008802078664303, 0.00016414640413131565, 0.00017307695816271007, 0.00046235581976361573, 0.00010459128679940477, 0.0008111353381536901, 0.00011445723794167861, 0.00020139095431659371, 0.00010999388905474916, 0.00019863303168676794, 0.00070302939275279641, 0.00011609663488343358, 0.0002120308781741187, 0.0010010822443291545, 0.00047728797653689981, 0.00011036772048100829, 8.4043131209909916e-05, 0.0012589324032887816, 0.0003618648333940655, 0.00019172400061506778, 0.00020949891768395901, 7.1418777224607766e-05, 7.3102892201859504e-05, 7.5018280767835677e-05, 0.00019579943909775466, 0.00029761725454591215, 0.00040492680273018777, 7.1520698838867247e-05, 0.00017127090541180223, 0.00084930204320698977, 0.00054065737640485168, 0.002318632323294878, 0.00042894142097793519, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 86,-47,-69,-100,14,-103,67,-35,66,14,99,52,-81,78,54,-121,79,-101,10,-50,-127,-51,33,115,-1,68,-19,50,-127,-15,79,-81,-42,-54,53,92,-127,57,106,75,-32,-127,-92,38,-68,-39,3,-81, 84,-68,85,127,72,22,127,-127,-84,82,67,70,6,73,65,117,81,-100,-89,-60,85,-91,48,-5,118,127,-44,65,15,73,79,-52,48,110,127,127,-87,41,89,-35,97,26,-70,94,127,105,-8,-8, 4,-32,10,-49,30,37,29,-105,-19,33,-70,32,77,0,-71,-3,32,-37,97,-9,27,-7,-85,-99,35,1,-13,17,38,91,33,14,-6,-43,33,33,-3,0,0,-66,-47,106,-12,56,-65,-82,-6,82, 
  /* [0][1][][] */ 104,68,-127,22,-82,-127,63,-46,88,-75,127,-96,85,89,127,125,-35,115,-8,-90,117,-78,45,127,-19,-2,-23,10,-58,107,52,-127,-127,-60,-17,37,3,105,127,127,-49,-78,-127,44,-4,-29,-127,-127, 127,127,125,-17,-127,-1,120,-126,-127,-127,91,-127,35,127,101,-127,-29,127,127,-127,-56,-127,71,-48,55,13,-127,56,18,127,127,-116,108,127,-27,13,-4,127,113,-51,127,-2,-47,127,-11,127,116,48, 7,51,11,4,-34,59,33,-97,-19,-97,-73,-73,-127,-12,-84,-2,43,30,-102,-48,-55,-14,-127,-126,-45,3,-73,12,48,101,20,9,-1,-56,-9,3,19,25,5,-89,-59,100,9,81,4,-86,-2,101, 
  /* [0][2][][] */ 21,-43,-25,-4,26,-35,3,0,76,19,22,45,2,36,-12,-16,-127,-35,-8,-33,10,-41,6,46,91,-20,-23,-98,24,64,-12,-83,-27,-33,-60,-1,107,30,19,69,-109,-52,-102,13,1,-1,87,-60, 18,-70,10,-1,23,-9,18,-42,-79,63,-6,60,-23,49,-7,10,-95,-31,-14,-72,-32,-57,26,-18,127,-17,-49,-127,28,70,3,-49,25,82,-52,19,115,50,28,-31,-56,5,-66,91,-5,-8,-99,67, -17,-32,31,1,-1,7,9,-38,-3,51,-39,25,9,-28,-25,-3,22,-11,14,-47,3,10,-44,-67,-10,-12,-14,-48,22,76,-6,18,-8,-32,-33,5,98,8,-8,-46,-97,59,-16,32,1,4,1,18, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0023628412745893002, 0.0062997867353260517, 0.048085551708936691, 0.043325942009687424, 0.0041967295110225677, 0.006033782847225666, 0.0040224748663604259, 0.013892857357859612, 0.0052147717215120792, 0.011198080144822598, 0.0019072195282205939, 0.020209921523928642, 0.043697074055671692, 0.0056910067796707153, 0.006794340442866087, 0.14878740906715393, 0.0069762221537530422, 0.0073557705618441105, 0.01965012215077877, 0.0044451295398175716, 0.034473251551389694, 0.0048644323833286762, 0.0085591152310371399, 0.0046747401356697083, 0.0084419036284089088, 0.029878748580813408, 0.0049341069534420967, 0.0090113123878836632, 0.042545996606349945, 0.020284738391637802, 0.004690628033131361, 0.0035718330182135105, 0.053504627197980881, 0.015379255637526512, 0.0081482697278261185, 0.0089037036523222923, 0.0030352978501468897, 0.0031068727839738131, 0.0031882768962532282, 0.0083214761689305305, 0.012648733332753181, 0.017209388315677643, 0.0030396296642720699, 0.0072790132835507393, 0.036095336079597473, 0.022977937012910843, 0.098541870713233948, 0.018230009824037552, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { -610, -13032, 2937574, 9240, 16947, 3997, 6079, 1119, -1588, -11432, 1189, 5074, 36099, -19291, -236, 2730, -11808, -2418, 4575, 14127, 15006, 5121, 6605, 1416, 17621, 49085, 16509, -19344, 3401, -1934, 580, -5328, 31908, 12044, 18769, -2021, -17845, -431, -5577, 225, -20500, -16127, -4146, 3514, 15244, -18759, 3873, -2319, };
const TfArray<48, float> quant36_scale = { 48, { 0.0001675489911576733, 0.00016761670121923089, 3.5271474985165696e-07, 0.00012615969171747565, 0.00017419885261915624, 0.00076356949284672737, 0.00066530297044664621, 0.00038303819019347429, 0.0003886500489898026, 0.00018853342044167221, 0.0014273762935772538, 0.00022862342302687466, 3.807912435149774e-05, 0.00022563095262739807, 0.00048845965648069978, 7.0423120632767677e-05, 0.00015076655836310238, 0.00021988684602547437, 0.00020019731891807169, 0.00010387443762738258, 8.6412728705909103e-05, 0.00099815358407795429, 0.00015345044084824622, 0.00052027835045009851, 0.00013421780022326857, 3.911708336090669e-05, 0.00025359753635711968, 0.00019229817553423345, 0.00067250645952299237, 0.00027407266316004097, 0.00059355772100389004, 0.00085161207243800163, 7.0718451752327383e-05, 0.00018813447968568653, 0.00018784338317345828, 0.00041876922477968037, 0.0002685164799913764, 0.00025125258252955973, 0.00057682517217472196, 0.00021156377624720335, 0.00019384817278478295, 0.00015497417189180851, 0.00025467685190960765, 0.00022824431653134525, 7.0506146585103124e-05, 0.00017685121565591544, 5.8598212490323931e-05, 0.0003111526311840862, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 9,53,5,-14,100,-27,127,-12, 
  /* [1][0][][] */ 123,73,69,24,-6,-50,-10,127, 
  /* [2][0][][] */ 69,-11,-2,-127,-2,26,47,-66, 
  /* [3][0][][] */ 41,-25,-127,7,8,-44,30,105, 
  /* [4][0][][] */ -123,94,-127,-27,21,26,-41,-36, 
  /* [5][0][][] */ 127,-13,-4,-47,-6,-29,5,-122, 
  /* [6][0][][] */ 0,-12,-9,4,-127,-32,60,-3, 
  /* [7][0][][] */ -8,-54,-7,5,-22,-1,-127,-3, 
  /* [8][0][][] */ -20,34,26,-11,127,22,-57,-29, 
  /* [9][0][][] */ 127,-41,25,7,-12,-32,38,112, 
  /* [10][0][][] */ 127,7,-8,-41,-4,6,-2,-122, 
  /* [11][0][][] */ -51,-1,6,127,-6,-39,-31,26, 
  /* [12][0][][] */ -124,4,-74,-21,19,103,-55,-127, 
  /* [13][0][][] */ 120,8,127,14,-13,25,20,43, 
  /* [14][0][][] */ -127,-10,14,11,1,-11,7,125, 
  /* [15][0][][] */ -118,8,3,123,0,-5,-26,127, 
  /* [16][0][][] */ 56,-80,127,65,0,-111,47,66, 
  /* [17][0][][] */ 25,-62,-75,120,11,23,-3,127, 
  /* [18][0][][] */ 13,-30,-127,51,-13,-2,43,124, 
  /* [19][0][][] */ 28,10,-5,127,-9,2,-73,-38, 
  /* [20][0][][] */ 20,57,117,-117,0,-79,4,-127, 
  /* [21][0][][] */ 3,-4,-9,2,-127,-10,56,-1, 
  /* [22][0][][] */ -1,61,-6,-7,7,127,-9,-3, 
  /* [23][0][][] */ 111,28,-14,89,-1,-4,-41,-127, 
  /* [24][0][][] */ -127,25,-69,-25,7,-52,-61,-45, 
  /* [25][0][][] */ -46,-6,-73,-54,18,-127,22,-56, 
  /* [26][0][][] */ -110,-22,-127,13,15,3,-16,-33, 
  /* [27][0][][] */ 108,11,127,19,-5,42,20,56, 
  /* [28][0][][] */ 8,-60,-16,34,27,-127,-2,16, 
  /* [29][0][][] */ -3,-8,27,-127,-16,-8,21,2, 
  /* [30][0][][] */ -50,10,127,-4,4,4,-3,-127, 
  /* [31][0][][] */ 0,14,0,4,127,24,-51,-5, 
  /* [32][0][][] */ -127,-8,-115,1,11,-40,-16,-72, 
  /* [33][0][][] */ 11,-52,9,-30,41,-127,15,-20, 
  /* [34][0][][] */ -58,-114,-127,69,9,-56,-6,-27, 
  /* [35][0][][] */ 53,11,-123,1,3,-4,10,127, 
  /* [36][0][][] */ 70,47,82,34,-1,127,4,22, 
  /* [37][0][][] */ -5,17,1,127,8,-16,-13,15, 
  /* [38][0][][] */ -5,28,5,-1,127,21,-37,-8, 
  /* [39][0][][] */ -5,10,-15,20,-37,127,-96,-8, 
  /* [40][0][][] */ 117,-21,127,18,-25,29,16,60, 
  /* [41][0][][] */ 127,2,125,25,-9,2,35,47, 
  /* [42][0][][] */ 65,-48,-15,-38,37,127,29,-33, 
  /* [43][0][][] */ -6,-63,-5,1,-45,-13,-127,7, 
  /* [44][0][][] */ -24,-117,39,104,26,33,24,-127, 
  /* [45][0][][] */ 124,17,127,3,-1,26,31,42, 
  /* [46][0][][] */ -87,20,8,127,-4,2,-43,71, 
  /* [47][0][][] */ -2,48,-11,-3,-2,127,-19,3, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0029227701015770435, 0.0029239512514322996, 6.1528521655418444e-06, 0.0022007639054208994, 0.0030387721490114927, 0.013319914229214191, 0.01160572562366724, 0.0066818222403526306, 0.006779717281460762, 0.0032888283021748066, 0.024899540469050407, 0.0039881691336631775, 0.00066426262492313981, 0.0039359675720334053, 0.0085208229720592499, 0.0012284800177440047, 0.00263001280836761, 0.003835765877738595, 0.0034922964405268431, 0.0018120139138773084, 0.0015074071707203984, 0.017412062734365463, 0.002676831092685461, 0.0090758772566914558, 0.0023413316812366247, 0.00068236904917284846, 0.0044238241389393806, 0.0033545016776770353, 0.011731385253369808, 0.0047809979878365993, 0.010354182682931423, 0.014855752699077129, 0.0012336318613961339, 0.0032818689942359924, 0.0032767909578979015, 0.0073051243089139462, 0.0046840743161737919, 0.0043829181231558323, 0.010062295012176037, 0.0036905759479850531, 0.0033815403003245592, 0.0027034115046262741, 0.0044426522217690945, 0.003981555812060833, 0.0012299283407628536, 0.003085040720179677, 0.0010222031269222498, 0.0054278313182294369, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 1903, 1695, -681, -9520, 762, -1017, -653, 4546, };
const TfArray<8, float> quant38_scale = { 8, { 0.00020462220709305257, 0.00021911022486165166, 0.00029498556978069246, 0.0001950345904333517, 0.00022055314911995083, 9.6534524345770478e-05, 0.00029269797960296273, 0.00018986056966241449, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -15,-14,-25,14,-7,-127,12,36, 
  /* [1][0][][] */ -63,16,-127,107,11,63,-24,38, 
  /* [2][0][][] */ 13,-7,24,-4,-9,-127,10,30, 
  /* [3][0][][] */ 26,47,53,127,14,-47,-42,-7, 
  /* [4][0][][] */ 10,62,15,-24,-127,-6,28,-3, 
  /* [5][0][][] */ 57,-28,127,-103,13,-60,-13,-45, 
  /* [6][0][][] */ 26,127,48,-44,42,-11,-69,-23, 
  /* [7][0][][] */ -21,-31,-38,-17,-15,-127,18,39, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0086964434012770653, 0.0093121845275163651, 0.012536886148154736, 0.0082889702171087265, 0.0093735083937644958, 0.0041027171537280083, 0.012439663521945477, 0.0080690737813711166, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { 8751, 280, 7027, 2202, 11085, 1728, 474, 3187, };
const TfArray<8, float> quant40_scale = { 8, { 8.0392390373162925e-05, 0.00057857547653838992, 0.00014112211647443473, 0.00044572999468073249, 0.00018521992024034262, 0.00019553897436708212, 0.00063647294882684946, 6.4601394115015864e-05, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -23,-9,0,0,3,27,-1,-1, 16,-6,2,-7,15,127,10,127, 5,-5,0,-9,3,14,0,13, 
  /* [0][1][][] */ 3,-127,-10,5,-15,-5,-101,3, -127,90,-77,127,-127,-7,127,-37, 11,-6,-8,-67,-9,0,53,-17, 
  /* [0][2][][] */ 19,-8,-2,-2,2,-23,8,-9, 68,-7,127,-23,19,-114,5,1, 14,-5,-9,-10,0,-23,2,-6, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.003416676539927721, 0.024589456617832184, 0.0059976899065077305, 0.018943523988127708, 0.0078718466684222221, 0.008310406468808651, 0.027050100266933441, 0.0027455592062324286, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 45497, 9751, 56260, 18485, 22051, 546490, 278, 34224, };
const TfArray<8, float> quant42_scale = { 8, { 7.1732531068846583e-05, 3.8491529267048463e-05, 7.0022557338234037e-05, 4.9886792112374678e-05, 9.1062036517541856e-05, 6.4460732573934365e-06, 1.081324717233656e-05, 7.9413039202336222e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 9,-4,12, 8,-24,30, 12,-24,20, 
  /* [0][1][][] */ 39,28,26, 65,17,58, 24,-33,38, 
  /* [0][2][][] */ -21,-93,-13, -30,-127,-1, -7,-55,18, 
  /* [1][0][][] */ 26,70,20, 1,5,-6, -35,-71,-30, 
  /* [1][1][][] */ 49,116,35, -2,-4,-7, -57,-127,-41, 
  /* [1][2][][] */ 26,41,8, 0,-5,-3, -35,-55,-6, 
  /* [2][0][][] */ 42,92,10, 53,127,12, 14,41,-3, 
  /* [2][1][][] */ -48,-85,-29, -82,-95,-40, -33,-8,-23, 
  /* [2][2][][] */ 0,10,6, 4,16,-1, -1,9,-9, 
  /* [3][0][][] */ 45,-32,-17, 78,-37,-40, 31,-16,-12, 
  /* [3][1][][] */ 78,-58,-39, 127,-57,-75, 59,-29,-29, 
  /* [3][2][][] */ 19,-21,-4, 42,-29,-15, 17,-9,1, 
  /* [4][0][][] */ -12,-24,-4, 27,45,9, -16,-29,-4, 
  /* [4][1][][] */ -30,-61,-10, 63,127,18, -36,-62,-8, 
  /* [4][2][][] */ -11,-15,2, 20,23,-4, -13,-15,-4, 
  /* [5][0][][] */ -18,-43,-22, -41,-76,-49, -38,-36,-33, 
  /* [5][1][][] */ -54,-101,-50, -79,-127,-67, -45,-39,-41, 
  /* [5][2][][] */ 2,5,-12, 2,3,-5, 0,12,1, 
  /* [6][0][][] */ -97,0,40, 8,27,-10, 74,24,-16, 
  /* [6][1][][] */ -127,-31,49, 19,27,-24, 118,23,-28, 
  /* [6][2][][] */ -48,-9,21, 21,-2,2, 41,-7,36, 
  /* [7][0][][] */ -4,17,0, -14,24,-5, -4,23,-6, 
  /* [7][1][][] */ 19,84,-5, 25,127,-21, 0,61,-25, 
  /* [7][2][][] */ -27,-49,-19, -41,-51,-32, -19,5,-18, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.018291793763637543, 0.0098153389990329742, 0.017855750396847725, 0.012721131555736065, 0.023220818489789963, 0.0016437486046925187, 0.0027573779225349426, 0.020250324159860611, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant46_scale = { 1, { 0.068344488739967346, } };
const TfArray<1, int> quant46_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<1, float> quant47_scale = { 1, { 0.057325407862663269, } };
const TfArray<1, int> quant47_zero = { 1, { -45 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.05700996145606041, } };
const TfArray<1, int> quant51_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.020370421931147575, } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.048000842332839966, } };
const TfArray<1, int> quant54_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<1, float> quant55_scale = { 1, { 0.056836850941181183, } };
const TfArray<1, int> quant55_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<1, float> quant56_scale = { 1, { 0.016819784417748451, } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.045570999383926392, } };
const TfArray<1, int> quant59_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<1, float> quant60_scale = { 1, { 0.016441626474261284, } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant61_scale = { 1, { 0.019812386482954025, } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.021312691271305084, } };
const TfArray<1, int> quant62_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant63_scale = { 1, { 0.050018392503261566, } };
const TfArray<1, int> quant63_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<1, float> quant64_scale = { 1, { 0.013211960904300213, } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.018027298152446747, } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.042327553033828735, } };
const TfArray<1, int> quant66_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<1, float> quant67_scale = { 1, { 0.062875129282474518, } };
const TfArray<1, int> quant67_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<1, float> quant68_scale = { 1, { 0.017571726813912392, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.035883110016584396, } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.051617186516523361, } };
const TfArray<1, int> quant70_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2016), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension70, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_803493_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_803493_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_803493_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_803493_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_803493_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
